{"version":3,"sources":["null","ng://@swimlane/ngx-graph/lib/utils/id.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/dagre.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/dagreCluster.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/dagreNodesOnly.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/d3ForceDirected.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/layout.service.ts","ng://@swimlane/ngx-graph/lib/graph/graph.component.ts","ng://@swimlane/ngx-graph/lib/graph/mouse-wheel.directive.ts","ng://@swimlane/ngx-graph/lib/graph/graph.module.ts","ng://@swimlane/ngx-graph/lib/ngx-graph.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","cache","id","newId","Math","random","pow","toString","slice","DagreLayout","defaultSettings","orientation","Orientation","marginX","marginY","edgePadding","rankPadding","nodePadding","settings","run","graph","createDagreGraph","dagre.layout","dagreGraph","edgeLabels","_edgeLabels","dagreNodeId","dagreNode","this_1","_nodes","node","nodes","find","position","x","y","dimension","width","height","updateEdge","edge","sourceNode","source","targetNode","target","dir","startingPoint","endingPoint","points","dagre.graphlib","Graph","setGraph","rankdir","marginx","marginy","edgesep","ranksep","nodesep","align","acyclicer","ranker","setDefaultEdgeLabel","dagreNodes","map","dagreEdges","edges","l","newLink","_c","tslib_1.__values","_d","setNode","_e","_f","setEdge","DagreClusterLayout","_this","dagreToOutput","clusters","compound","dagreClusters","cluster","childNodeIds","forEach","childNodeId","setParent","_g","_h","_j","toD3Node","maybeNode","layouts","dagre","dagreCluster","dagreNodesOnly","DagreNodesOnlyLayout","curveDistance","_b","rankAxis","orderAxis","rankDimension","_a","edgeLabelId","matchingEdgeLabel","d3","D3ForceDirectedLayout","force","forceSimulation","forceManyBody","strength","forceCollide","forceLink","distance","outputGraph$","Subject","inputGraph","d3Graph","outputGraph","links","alpha","restart","on","d3GraphToOutputGraph","asObservable","transform","onDragStart","draggingNode","$event","alphaTarget","d3Node","draggingStart","fx","fy","onDrag","onDragEnd","undefined","LayoutService","getLayout","name","Error","Injectable","console","log","ElementRef","GraphComponent","el","zone","cd","layoutService","_super","legend","activeEntries","draggingEnabled","panningEnabled","enableZoom","zoomSpeed","minZoomLevel","maxZoomLevel","autoZoom","panOnZoom","autoCenter","activate","EventEmitter","deactivate","graphSubscription","Subscription","subscriptions","margin","results","isPanning","isDragging","initialized","graphDims","_oldLinks","transformationMatrix","identity","_touchLastX","_touchLastY","groupResultsBy","label","__extends","__","constructor","create","tslib_1.__extends","defineProperty","a","level","zoomTo","Number","panTo","f","ngOnInit","update$","subscribe","update","center$","center","zoomToFit$","zoomToFit","ngOnChanges","changes","layout","layoutSettings","setLayout","setLayoutSettings","ngOnDestroy","unsubscribe","ngAfterViewInit","setTimeout","curve","shape.curveBundle","beta","dims","calculateViewDimensions","margins","showLegend","seriesDomain","getSeriesDomain","setColors","legendOptions","getLegendOptions","createGraph","updateTransform","draw","applyNodeDimensions","result","result$","Observable","of","add","tick","pipe","first","data","color","colors","getColor","newLinks","edgeLabel","normKey","replace","oldLink","ol","nl","oldLine","line","generateLine","textPos","floor","textTransform","textAngle","calcDominantBaseline","newL","max","requestAnimationFrame","redrawLines","markForCheck","nodeElements","elem","nativeElement","getBoundingClientRect","ex","nodeHeight","nodeMaxHeight","nodeMinHeight","min","nodeWidth","getElementsByTagName","textDims","getBBox","nodeMaxWidth","nodeMinWidth","_animate","linkElements","linkEl","lin","select","attr","transition","duration","chartElement","oldTextPath","textPath","initializeNode","tslib_1.__spread","link","firstPoint","lastPoint","dominantBaseline","reverse","shape\r\n                .line","lineFunction","onZoom","direction","zoomFactor","newZoomLevel","zoomLevel","mouseX","clientX","mouseY","clientY","svg","chart","querySelector","svgGroup","point","createSVGPoint","svgPoint","matrixTransform","getScreenCTM","inverse","pan","zoom","translate","isNaN","factor","scale","onPan","event","movementX","movementY","this_2","redrawEdge","toSVG","onClick","originalEvent","origEvent","emit","onDoubleClick","isDoubleClick","onActivate","indexOf","entries","onDeactivate","idx","splice","reduce","sort","trackLinkBy","index","trackNodeBy","ColorHelper","scheme","customColors","scaleType","domain","onMouseMove","onTouchStart","changedTouches","onTouchMove","onTouchEnd","onMouseUp","onNodeMouseDown","heightZoom","widthZoom","Component","args","selector","styles","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","animations","trigger","ngTransition","animate","style","NgZone","ChangeDetectorRef","Input","Output","ContentChild","ViewChild","ChartComponent","read","ViewChildren","HostListener","BaseChartComponent","MouseWheelDirective","mouseWheelUp","mouseWheelDown","onMouseWheelChrome","mouseWheelFunc","onMouseWheelFirefox","onMouseWheelIE","window","delta","wheelDelta","detail","returnValue","preventDefault","Directive","GraphModule","NgModule","imports","ChartCommonModule","declarations","exports","providers","NgxGraphModule","NgxChartsModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","const cache = {};\r\n\r\n/**\r\n * Generates a short id.\r\n *\r\n */\r\nexport function id(): string {\r\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\r\n\r\n  newId = `a${newId}`;\r\n\r\n  // ensure not already used\r\n  if (!cache[newId]) {\r\n    cache[newId] = true;\r\n    return newId;\r\n  }\r\n\r\n  return id();\r\n}\r\n","import { Layout } from '../../models/layout.model';\r\nimport { Graph } from '../../models/graph.model';\r\nimport { id } from '../../utils/id';\r\nimport * as dagre from 'dagre';\r\nimport { Edge } from '../../models/edge.model';\r\n\r\nexport enum Orientation {\r\n  LEFT_TO_RIGHT = 'LR',\r\n  RIGHT_TO_LEFT = 'RL',\r\n  TOP_TO_BOTTOM = 'TB',\r\n  BOTTOM_TO_TOM = 'BT'\r\n}\r\nexport enum Alignment {\r\n  CENTER = 'C',\r\n  UP_LEFT = 'UL',\r\n  UP_RIGHT = 'UR',\r\n  DOWN_LEFT = 'DL',\r\n  DOWN_RIGHT = 'DR'\r\n}\r\n\r\nexport interface DagreSettings {\r\n  orientation?: Orientation;\r\n  marginX?: number;\r\n  marginY?: number;\r\n  edgePadding?: number;\r\n  rankPadding?: number;\r\n  nodePadding?: number;\r\n  align?: Alignment;\r\n  acyclicer?: 'greedy' | undefined;\r\n  ranker?: 'network-simplex' | 'tight-tree' | 'longest-path';\r\n}\r\n\r\nexport class DagreLayout implements Layout {\r\n  defaultSettings: DagreSettings = {\r\n    orientation: Orientation.LEFT_TO_RIGHT,\r\n    marginX: 20,\r\n    marginY: 20,\r\n    edgePadding: 100,\r\n    rankPadding: 100,\r\n    nodePadding: 50\r\n  };\r\n  settings: DagreSettings = {};\r\n\r\n  dagreGraph: any;\r\n  dagreNodes: any;\r\n  dagreEdges: any;\r\n\r\n  run(graph: Graph): Graph {\r\n    this.createDagreGraph(graph);\r\n    dagre.layout(this.dagreGraph);\r\n\r\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\r\n\r\n    for (const dagreNodeId in this.dagreGraph._nodes) {\r\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\r\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\r\n      node.position = {\r\n        x: dagreNode.x,\r\n        y: dagreNode.y\r\n      };\r\n      node.dimension = {\r\n        width: dagreNode.width,\r\n        height: dagreNode.height\r\n      };\r\n    }\r\n\r\n    return graph;\r\n  }\r\n\r\n  updateEdge(graph: Graph, edge: Edge): Graph {\r\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\r\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\r\n\r\n    // determine new arrow position\r\n    const dir = sourceNode.position.y <= targetNode.position.y ? -1 : 1;\r\n    const startingPoint = {\r\n      x: sourceNode.position.x,\r\n      y: sourceNode.position.y - dir * (sourceNode.dimension.height / 2)\r\n    };\r\n    const endingPoint = {\r\n      x: targetNode.position.x,\r\n      y: targetNode.position.y + dir * (targetNode.dimension.height / 2)\r\n    };\r\n\r\n    // generate new points\r\n    edge.points = [startingPoint, endingPoint];\r\n    \r\n    return graph;\r\n  }\r\n\r\n  createDagreGraph(graph: Graph): any {\r\n    this.dagreGraph = new dagre.graphlib.Graph();\r\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\r\n    this.dagreGraph.setGraph({\r\n      rankdir: settings.orientation,\r\n      marginx: settings.marginX,\r\n      marginy: settings.marginY,\r\n      edgesep: settings.edgePadding,\r\n      ranksep: settings.rankPadding,\r\n      nodesep: settings.nodePadding,\r\n      align: settings.align,\r\n      acyclicer: settings.acyclicer,\r\n      ranker: settings.ranker\r\n    });\r\n\r\n    // Default to assigning a new object as a label for each new edge.\r\n    this.dagreGraph.setDefaultEdgeLabel(() => {\r\n      return {\r\n        /* empty */\r\n      };\r\n    });\r\n\r\n    this.dagreNodes = graph.nodes.map(n => {\r\n      const node: any = Object.assign({}, n);\r\n      node.width = n.dimension.width;\r\n      node.height = n.dimension.height;\r\n      node.x = n.position.x;\r\n      node.y = n.position.y;\r\n      return node;\r\n    });\r\n\r\n    this.dagreEdges = graph.edges.map(l => {\r\n      const newLink: any = Object.assign({}, l);\r\n      if (!newLink.id) {\r\n        newLink.id = id();\r\n      }\r\n      return newLink;\r\n    });\r\n\r\n    for (const node of this.dagreNodes) {\r\n      if (!node.width) {\r\n        node.width = 20;\r\n      }\r\n      if (!node.height) {\r\n        node.height = 30;\r\n      }\r\n\r\n      // update dagre\r\n      this.dagreGraph.setNode(node.id, node);\r\n    }\r\n\r\n    // update dagre\r\n    for (const edge of this.dagreEdges) {\r\n      this.dagreGraph.setEdge(edge.source, edge.target);\r\n    }\r\n\r\n    return this.dagreGraph;\r\n  }\r\n}\r\n","import { Layout } from '../../models/layout.model';\r\nimport { Graph } from '../../models/graph.model';\r\nimport { id } from '../../utils/id';\r\nimport * as dagre from 'dagre';\r\nimport { Edge } from '../../models/edge.model';\r\nimport { Node, ClusterNode } from '../../models/node.model';\r\nimport { DagreSettings, Orientation } from './dagre';\r\n\r\nexport class DagreClusterLayout implements Layout {\r\n  defaultSettings: DagreSettings = {\r\n    orientation: Orientation.LEFT_TO_RIGHT,\r\n    marginX: 20,\r\n    marginY: 20,\r\n    edgePadding: 100,\r\n    rankPadding: 100,\r\n    nodePadding: 50\r\n  };\r\n  settings: DagreSettings = {};\r\n\r\n  dagreGraph: any;\r\n  dagreNodes: Node[];\r\n  dagreClusters: ClusterNode[];\r\n  dagreEdges: any;\r\n\r\n  run(graph: Graph): Graph {\r\n    this.createDagreGraph(graph);\r\n    dagre.layout(this.dagreGraph);\r\n\r\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\r\n\r\n    const dagreToOutput = node => {\r\n      const dagreNode = this.dagreGraph._nodes[node.id];\r\n      return {\r\n        ...node,\r\n        position: {\r\n          x: dagreNode.x,\r\n          y: dagreNode.y\r\n        },\r\n        dimension: {\r\n          width: dagreNode.width,\r\n          height: dagreNode.height\r\n        }\r\n      };\r\n    };\r\n    graph.clusters = (graph.clusters || []).map(dagreToOutput);\r\n    graph.nodes = graph.nodes.map(dagreToOutput);\r\n\r\n    return graph;\r\n  }\r\n\r\n  updateEdge(graph: Graph, edge: Edge): Graph {\r\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\r\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\r\n\r\n    // determine new arrow position\r\n    const dir = sourceNode.position.y <= targetNode.position.y ? -1 : 1;\r\n    const startingPoint = {\r\n      x: sourceNode.position.x,\r\n      y: sourceNode.position.y - dir * (sourceNode.dimension.height / 2)\r\n    };\r\n    const endingPoint = {\r\n      x: targetNode.position.x,\r\n      y: targetNode.position.y + dir * (targetNode.dimension.height / 2)\r\n    };\r\n\r\n    // generate new points\r\n    edge.points = [startingPoint, endingPoint];\r\n    return graph;\r\n  }\r\n\r\n  createDagreGraph(graph: Graph): any {\r\n    this.dagreGraph = new dagre.graphlib.Graph({ compound: true });\r\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\r\n    this.dagreGraph.setGraph({\r\n      rankdir: settings.orientation,\r\n      marginx: settings.marginX,\r\n      marginy: settings.marginY,\r\n      edgesep: settings.edgePadding,\r\n      ranksep: settings.rankPadding,\r\n      nodesep: settings.nodePadding,\r\n      align: settings.align,\r\n      acyclicer: settings.acyclicer,\r\n      ranker: settings.ranker\r\n    });\r\n\r\n    // Default to assigning a new object as a label for each new edge.\r\n    this.dagreGraph.setDefaultEdgeLabel(() => {\r\n      return {\r\n        /* empty */\r\n      };\r\n    });\r\n\r\n    this.dagreNodes = graph.nodes.map((n: Node) => {\r\n      const node: any = Object.assign({}, n);\r\n      node.width = n.dimension.width;\r\n      node.height = n.dimension.height;\r\n      node.x = n.position.x;\r\n      node.y = n.position.y;\r\n      return node;\r\n    });\r\n\r\n    this.dagreClusters = graph.clusters || [];\r\n\r\n    this.dagreEdges = graph.edges.map(l => {\r\n      const newLink: any = Object.assign({}, l);\r\n      if (!newLink.id) {\r\n        newLink.id = id();\r\n      }\r\n      return newLink;\r\n    });\r\n\r\n    for (const node of this.dagreNodes) {\r\n      this.dagreGraph.setNode(node.id, node);\r\n    }\r\n\r\n    for (const cluster of this.dagreClusters) {\r\n      this.dagreGraph.setNode(cluster.id, cluster);\r\n      cluster.childNodeIds.forEach(childNodeId => {\r\n        this.dagreGraph.setParent(childNodeId, cluster.id);\r\n      });\r\n    }\r\n\r\n    // update dagre\r\n    for (const edge of this.dagreEdges) {\r\n      this.dagreGraph.setEdge(edge.source, edge.target);\r\n    }\r\n\r\n    return this.dagreGraph;\r\n  }\r\n}\r\n","import { Layout } from '../../models/layout.model';\r\nimport { Graph } from '../../models/graph.model';\r\nimport { id } from '../../utils/id';\r\nimport * as dagre from 'dagre';\r\nimport { Edge } from '../../models/edge.model';\r\n\r\nexport enum Orientation {\r\n  LEFT_TO_RIGHT = 'LR',\r\n  RIGHT_TO_LEFT = 'RL',\r\n  TOP_TO_BOTTOM = 'TB',\r\n  BOTTOM_TO_TOM = 'BT'\r\n}\r\nexport enum Alignment {\r\n  CENTER = 'C',\r\n  UP_LEFT = 'UL',\r\n  UP_RIGHT = 'UR',\r\n  DOWN_LEFT = 'DL',\r\n  DOWN_RIGHT = 'DR'\r\n}\r\n\r\nexport interface DagreSettings {\r\n  orientation?: Orientation;\r\n  marginX?: number;\r\n  marginY?: number;\r\n  edgePadding?: number;\r\n  rankPadding?: number;\r\n  nodePadding?: number;\r\n  align?: Alignment;\r\n  acyclicer?: 'greedy' | undefined;\r\n  ranker?: 'network-simplex' | 'tight-tree' | 'longest-path';\r\n}\r\n\r\nexport interface DagreNodesOnlySettings extends DagreSettings {\r\n  curveDistance?: number;\r\n}\r\n\r\nconst DEFAULT_EDGE_NAME = '\\x00';\r\nconst GRAPH_NODE = '\\x00';\r\nconst EDGE_KEY_DELIM = '\\x01';\r\n\r\nexport class DagreNodesOnlyLayout implements Layout {\r\n  defaultSettings: DagreNodesOnlySettings = {\r\n    orientation: Orientation.LEFT_TO_RIGHT,\r\n    marginX: 20,\r\n    marginY: 20,\r\n    edgePadding: 100,\r\n    rankPadding: 100,\r\n    nodePadding: 50,\r\n    curveDistance: 20\r\n  };\r\n  settings: DagreNodesOnlySettings = {};\r\n\r\n  dagreGraph: any;\r\n  dagreNodes: any;\r\n  dagreEdges: any;\r\n\r\n  run(graph: Graph): Graph {\r\n    this.createDagreGraph(graph);\r\n    dagre.layout(this.dagreGraph);\r\n\r\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\r\n\r\n    for (const dagreNodeId in this.dagreGraph._nodes) {\r\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\r\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\r\n      node.position = {\r\n        x: dagreNode.x,\r\n        y: dagreNode.y\r\n      };\r\n      node.dimension = {\r\n        width: dagreNode.width,\r\n        height: dagreNode.height\r\n      };\r\n    }\r\n    for (const edge of graph.edges) {\r\n      this.updateEdge(graph, edge);\r\n    }\r\n\r\n    return graph;\r\n  }\r\n\r\n  updateEdge(graph: Graph, edge: Edge): Graph {\r\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\r\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\r\n    const rankAxis: 'x' | 'y' = this.settings.orientation === 'BT' || this.settings.orientation === 'TB' ? 'y' : 'x';\r\n    const orderAxis: 'x' | 'y' = rankAxis === 'y' ? 'x' : 'y';\r\n    const rankDimension = rankAxis === 'y' ? 'height' : 'width';\r\n    // determine new arrow position\r\n    const dir = sourceNode.position[rankAxis] <= targetNode.position[rankAxis] ? -1 : 1;\r\n    const startingPoint = {\r\n      [orderAxis]: sourceNode.position[orderAxis],\r\n      [rankAxis]: sourceNode.position[rankAxis] - dir * (sourceNode.dimension[rankDimension] / 2)\r\n    };\r\n    const endingPoint = {\r\n      [orderAxis]: targetNode.position[orderAxis],\r\n      [rankAxis]: targetNode.position[rankAxis] + dir * (targetNode.dimension[rankDimension] / 2)\r\n    };\r\n\r\n    const curveDistance = this.settings.curveDistance || this.defaultSettings.curveDistance;\r\n    // generate new points\r\n    edge.points = [\r\n      startingPoint,\r\n      {\r\n        [orderAxis]: startingPoint[orderAxis],\r\n        [rankAxis]: startingPoint[rankAxis] - dir * curveDistance\r\n      },\r\n      {\r\n        [orderAxis]: endingPoint[orderAxis],\r\n        [rankAxis]: endingPoint[rankAxis] + dir * curveDistance\r\n      },\r\n      endingPoint\r\n    ];\r\n    const edgeLabelId = `${edge.source}${EDGE_KEY_DELIM}${edge.target}${EDGE_KEY_DELIM}${DEFAULT_EDGE_NAME}`;\r\n    const matchingEdgeLabel = graph.edgeLabels[edgeLabelId];\r\n    if (matchingEdgeLabel) {\r\n      matchingEdgeLabel.points = edge.points;\r\n    }\r\n    return graph;\r\n  }\r\n\r\n  createDagreGraph(graph: Graph): any {\r\n    this.dagreGraph = new dagre.graphlib.Graph();\r\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\r\n    this.dagreGraph.setGraph({\r\n      rankdir: settings.orientation,\r\n      marginx: settings.marginX,\r\n      marginy: settings.marginY,\r\n      edgesep: settings.edgePadding,\r\n      ranksep: settings.rankPadding,\r\n      nodesep: settings.nodePadding,\r\n      align: settings.align,\r\n      acyclicer: settings.acyclicer,\r\n      ranker: settings.ranker\r\n    });\r\n\r\n    // Default to assigning a new object as a label for each new edge.\r\n    this.dagreGraph.setDefaultEdgeLabel(() => {\r\n      return {\r\n        /* empty */\r\n      };\r\n    });\r\n\r\n    this.dagreNodes = graph.nodes.map(n => {\r\n      const node: any = Object.assign({}, n);\r\n      node.width = n.dimension.width;\r\n      node.height = n.dimension.height;\r\n      node.x = n.position.x;\r\n      node.y = n.position.y;\r\n      return node;\r\n    });\r\n\r\n    this.dagreEdges = graph.edges.map(l => {\r\n      const newLink: any = Object.assign({}, l);\r\n      if (!newLink.id) {\r\n        newLink.id = id();\r\n      }\r\n      return newLink;\r\n    });\r\n\r\n    for (const node of this.dagreNodes) {\r\n      if (!node.width) {\r\n        node.width = 20;\r\n      }\r\n      if (!node.height) {\r\n        node.height = 30;\r\n      }\r\n\r\n      // update dagre\r\n      this.dagreGraph.setNode(node.id, node);\r\n    }\r\n\r\n    // update dagre\r\n    for (const edge of this.dagreEdges) {\r\n      this.dagreGraph.setEdge(edge.source, edge.target);\r\n    }\r\n\r\n    return this.dagreGraph;\r\n  }\r\n}\r\n","import { Layout } from '../../models/layout.model';\r\nimport { Graph } from '../../models/graph.model';\r\nimport { Node } from '../../models/node.model';\r\nimport { id } from '../../utils/id';\r\nimport { forceCollide, forceLink, forceManyBody, forceSimulation } from 'd3-force';\r\nimport { Edge } from '../../models/edge.model';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nexport interface D3ForceDirectedSettings {\r\n  force?: any;\r\n  forceLink?: any;\r\n}\r\nexport interface D3Node {\r\n  id?: string;\r\n  x: number;\r\n  y: number;\r\n  width?: number;\r\n  height?: number;\r\n  fx?: number;\r\n  fy?: number;\r\n}\r\nexport interface D3Edge {\r\n  source: string | D3Node;\r\n  target: string | D3Node;\r\n}\r\nexport interface D3Graph {\r\n  nodes: D3Node[];\r\n  edges: D3Edge[];\r\n}\r\nexport interface MergedNode extends D3Node, Node {\r\n  id: string;\r\n}\r\n\r\nexport function toD3Node(maybeNode: string | D3Node): D3Node {\r\n  if (typeof maybeNode === 'string') {\r\n    return {\r\n      id: maybeNode,\r\n      x: 0,\r\n      y: 0\r\n    };\r\n  }\r\n  return maybeNode;\r\n}\r\n\r\nexport class D3ForceDirectedLayout implements Layout {\r\n  defaultSettings: D3ForceDirectedSettings = {\r\n    force: forceSimulation<any>()\r\n      .force('charge', forceManyBody().strength(-150))\r\n      .force('collide', forceCollide(5)),\r\n    forceLink: forceLink<any, any>()\r\n      .id(node => node.id)\r\n      .distance(() => 100)\r\n  };\r\n  settings: D3ForceDirectedSettings = {};\r\n\r\n  inputGraph: Graph;\r\n  outputGraph: Graph;\r\n  d3Graph: D3Graph;\r\n  outputGraph$: Subject<Graph> = new Subject();\r\n\r\n  draggingStart: { x: number; y: number };\r\n\r\n  run(graph: Graph): Observable<Graph> {\r\n    this.inputGraph = graph;\r\n    this.d3Graph = {\r\n      nodes: [...this.inputGraph.nodes.map(n => ({ ...n }))] as any,\r\n      edges: [...this.inputGraph.edges.map(e => ({ ...e }))] as any\r\n    };\r\n    this.outputGraph = {\r\n      nodes: [],\r\n      edges: [],\r\n      edgeLabels: []\r\n    };\r\n    this.outputGraph$.next(this.outputGraph);\r\n    this.settings = Object.assign({}, this.defaultSettings, this.settings);\r\n    if (this.settings.force) {\r\n      this.settings.force\r\n        .nodes(this.d3Graph.nodes)\r\n        .force('link', this.settings.forceLink.links(this.d3Graph.edges))\r\n        .alpha(0.5)\r\n        .restart()\r\n        .on('tick', () => {\r\n          this.outputGraph$.next(this.d3GraphToOutputGraph(this.d3Graph));\r\n        });\r\n    }\r\n\r\n    return this.outputGraph$.asObservable();\r\n  }\r\n\r\n  updateEdge(graph: Graph, edge: Edge): Observable<Graph> {\r\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\r\n    if (settings.force) {\r\n      settings.force\r\n        .nodes(this.d3Graph.nodes)\r\n        .force('link', settings.forceLink.links(this.d3Graph.edges))\r\n        .alpha(0.5)\r\n        .restart()\r\n        .on('tick', () => {\r\n          this.outputGraph$.next(this.d3GraphToOutputGraph(this.d3Graph));\r\n        });\r\n    }\r\n\r\n    return this.outputGraph$.asObservable();\r\n  }\r\n\r\n  d3GraphToOutputGraph(d3Graph: D3Graph): Graph {\r\n    this.outputGraph.nodes = this.d3Graph.nodes.map((node: MergedNode) => ({\r\n      ...node,\r\n      id: node.id || id(),\r\n      position: {\r\n        x: node.x,\r\n        y: node.y\r\n      },\r\n      dimension: {\r\n        width: (node.dimension && node.dimension.width) || 20,\r\n        height: (node.dimension && node.dimension.height) || 20\r\n      },\r\n      transform: `translate(${node.x - ((node.dimension && node.dimension.width) || 20) / 2 || 0}, ${node.y -\r\n        ((node.dimension && node.dimension.height) || 20) / 2 || 0})`\r\n    }));\r\n\r\n    this.outputGraph.edges = this.d3Graph.edges.map(edge => ({\r\n      ...edge,\r\n      source: toD3Node(edge.source).id,\r\n      target: toD3Node(edge.target).id,\r\n      points: [\r\n        {\r\n          x: toD3Node(edge.source).x,\r\n          y: toD3Node(edge.source).y\r\n        },\r\n        {\r\n          x: toD3Node(edge.target).x,\r\n          y: toD3Node(edge.target).y\r\n        }\r\n      ]\r\n    }));\r\n\r\n    this.outputGraph.edgeLabels = this.outputGraph.edges;\r\n    return this.outputGraph;\r\n  }\r\n\r\n  onDragStart(draggingNode: Node, $event: MouseEvent): void {\r\n    this.settings.force.alphaTarget(0.3).restart();\r\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\r\n    if (!node) {\r\n      return;\r\n    }\r\n    this.draggingStart = { x: $event.x - node.x, y: $event.y - node.y };\r\n    node.fx = $event.x - this.draggingStart.x;\r\n    node.fy = $event.y - this.draggingStart.y;\r\n  }\r\n\r\n  onDrag(draggingNode: Node, $event: MouseEvent): void {\r\n    if (!draggingNode) {\r\n      return;\r\n    }\r\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\r\n    if (!node) {\r\n      return;\r\n    }\r\n    node.fx = $event.x - this.draggingStart.x;\r\n    node.fy = $event.y - this.draggingStart.y;\r\n  }\r\n\r\n  onDragEnd(draggingNode: Node, $event: MouseEvent): void {\r\n    if (!draggingNode) {\r\n      return;\r\n    }\r\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\r\n    if (!node) {\r\n      return;\r\n    }\r\n\r\n    this.settings.force.alphaTarget(0);\r\n    node.fx = undefined;\r\n    node.fy = undefined;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Layout } from '../../models/layout.model';\r\nimport { DagreLayout } from './dagre';\r\nimport { DagreClusterLayout } from './dagreCluster';\r\nimport { DagreNodesOnlyLayout } from './dagreNodesOnly';\r\nimport { D3ForceDirectedLayout } from './d3ForceDirected';\r\n\r\nconst layouts = {\r\n  dagre: DagreLayout,\r\n  dagreCluster: DagreClusterLayout,\r\n  dagreNodesOnly: DagreNodesOnlyLayout,\r\n  d3: D3ForceDirectedLayout\r\n};\r\n\r\n@Injectable()\r\nexport class LayoutService {\r\n  getLayout(name: string): Layout {\r\n    if (layouts[name]) {\r\n      return new layouts[name]();\r\n    } else {\r\n      throw new Error(`Unknown layout type '${name}'`);\r\n    }\r\n  }\r\n}\r\n","// rename transition due to conflict with d3 transition\r\nimport { animate, style, transition as ngTransition, trigger } from '@angular/animations';\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewChildren,\r\n  ViewEncapsulation,\r\n  NgZone,\r\n  ChangeDetectorRef,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport {\r\n  BaseChartComponent,\r\n  ChartComponent,\r\n  ColorHelper,\r\n  ViewDimensions,\r\n  calculateViewDimensions\r\n} from '@swimlane/ngx-charts';\r\nimport { select } from 'd3-selection';\r\nimport * as shape from 'd3-shape';\r\nimport 'd3-transition';\r\nimport { Observable, Subscription, of } from 'rxjs';\r\nimport { first } from 'rxjs/operators';\r\nimport { identity, scale, toSVG, transform, translate } from 'transformation-matrix';\r\nimport { Layout } from '../models/layout.model';\r\nimport { LayoutService } from './layouts/layout.service';\r\nimport { Edge } from '../models/edge.model';\r\nimport { Node, ClusterNode } from '../models/node.model';\r\nimport { Graph } from '../models/graph.model';\r\nimport { id } from '../utils/id';\r\n\r\nconsole.log('EL REF', ElementRef);\r\n\r\n/**\r\n * Matrix\r\n */\r\nexport interface Matrix {\r\n  a: number;\r\n  b: number;\r\n  c: number;\r\n  d: number;\r\n  e: number;\r\n  f: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'ngx-graph',\r\n  styles: [`.graph{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.graph .edge{stroke:#666;fill:none}.graph .edge .edge-label{stroke:none;font-size:12px;fill:#251e1e}.graph .panning-rect{fill:transparent;cursor:move}.graph .node-group .node:focus{outline:0}.graph .cluster rect{opacity:.2}`],\r\n  template: `\r\n  <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"legend\" [legendOptions]=\"legendOptions\" (legendLabelClick)=\"onClick($event, undefined)\"\r\n  (legendLabelActivate)=\"onActivate($event)\" (legendLabelDeactivate)=\"onDeactivate($event)\" mouseWheel (mouseWheelUp)=\"onZoom($event, 'in')\"\r\n  (mouseWheelDown)=\"onZoom($event, 'out')\">\r\n  <svg:g *ngIf=\"initialized && graph\" [attr.transform]=\"transform\" (touchstart)=\"onTouchStart($event)\" (touchend)=\"onTouchEnd($event)\"\r\n    class=\"graph chart\">\r\n    <defs>\r\n      <ng-template *ngIf=\"defsTemplate\" [ngTemplateOutlet]=\"defsTemplate\">\r\n      </ng-template>\r\n      <svg:path class=\"text-path\" *ngFor=\"let link of graph.edges\" [attr.d]=\"link.textPath\" [attr.id]=\"link.id\">\r\n      </svg:path>\r\n    </defs>\r\n    <svg:rect class=\"panning-rect\" [attr.width]=\"dims.width * 100\" [attr.height]=\"dims.height * 100\" [attr.transform]=\"'translate(' + ((-dims.width || 0) * 50) +',' + ((-dims.height || 0) *50) + ')' \"\r\n      (mousedown)=\"isPanning = true\" />\r\n      <svg:g class=\"clusters\">\r\n        <svg:g #clusterElement *ngFor=\"let node of graph.clusters; trackBy: trackNodeBy\" class=\"node-group\" [id]=\"node.id\" [attr.transform]=\"node.transform\"\r\n          (click)=\"onClick(node,$event)\">\r\n          <ng-template *ngIf=\"clusterTemplate\" [ngTemplateOutlet]=\"clusterTemplate\" [ngTemplateOutletContext]=\"{ $implicit: node }\">\r\n          </ng-template>\r\n          <svg:g *ngIf=\"!clusterTemplate\" class=\"node cluster\">\r\n            <svg:rect [attr.width]=\"node.dimension.width\" [attr.height]=\"node.dimension.height\" [attr.fill]=\"node.data?.color\" />\r\n            <svg:text alignment-baseline=\"central\" [attr.x]=\"10\" [attr.y]=\"node.dimension.height / 2\">{{node.label}}</svg:text>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g class=\"links\">\r\n      <svg:g #linkElement *ngFor=\"let link of graph.edges; trackBy: trackLinkBy\" class=\"link-group\" [id]=\"link.id\">\r\n        <ng-template *ngIf=\"linkTemplate\" [ngTemplateOutlet]=\"linkTemplate\" [ngTemplateOutletContext]=\"{ $implicit: link }\">\r\n        </ng-template>\r\n        <svg:path *ngIf=\"!linkTemplate\" class=\"edge\" [attr.d]=\"link.line\" />\r\n      </svg:g>\r\n    </svg:g>\r\n    <svg:g class=\"nodes\">\r\n      <svg:g #nodeElement *ngFor=\"let node of graph.nodes; trackBy: trackNodeBy\" class=\"node-group\" [id]=\"node.id\" [attr.transform]=\"node.transform\"\r\n        (click)=\"onClick(node,$event)\" (mousedown)=\"onNodeMouseDown($event, node)\" (dblclick)=\"onDoubleClick(node,$event)\">\r\n        <ng-template *ngIf=\"nodeTemplate\" [ngTemplateOutlet]=\"nodeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: node }\">\r\n        </ng-template>\r\n        <svg:circle *ngIf=\"!nodeTemplate\" r=\"10\" [attr.cx]=\"node.dimension.width / 2\" [attr.cy]=\"node.dimension.height / 2\" [attr.fill]=\"node.data?.color\"\r\n        />\r\n      </svg:g>\r\n    </svg:g>\r\n  </svg:g>\r\n</ngx-charts-chart>\r\n  `,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [trigger('link', [ngTransition('* => *', [animate(500, style({ transform: '*' }))])])]\r\n})\r\nexport class GraphComponent extends BaseChartComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {\r\n  @Input()\r\n  legend: boolean = false;\r\n\r\n  @Input()\r\n  nodes: Node[] = [];\r\n\r\n  @Input()\r\n  clusters: ClusterNode[] = [];\r\n\r\n  @Input()\r\n  links: Edge[] = [];\r\n\r\n  @Input()\r\n  activeEntries: any[] = [];\r\n\r\n  @Input()\r\n  curve: any;\r\n\r\n  @Input()\r\n  draggingEnabled = true;\r\n\r\n  @Input()\r\n  nodeHeight: number;\r\n\r\n  @Input()\r\n  nodeMaxHeight: number;\r\n\r\n  @Input()\r\n  nodeMinHeight: number;\r\n\r\n  @Input()\r\n  nodeWidth: number;\r\n\r\n  @Input()\r\n  nodeMinWidth: number;\r\n\r\n  @Input()\r\n  nodeMaxWidth: number;\r\n\r\n  @Input()\r\n  panningEnabled = true;\r\n\r\n  @Input()\r\n  enableZoom = true;\r\n\r\n  @Input()\r\n  zoomSpeed = 0.1;\r\n\r\n  @Input()\r\n  minZoomLevel = 0.1;\r\n\r\n  @Input()\r\n  maxZoomLevel = 4.0;\r\n\r\n  @Input()\r\n  autoZoom = false;\r\n\r\n  @Input()\r\n  panOnZoom = true;\r\n\r\n  @Input()\r\n  autoCenter = false;\r\n\r\n  @Input()\r\n  update$: Observable<any>;\r\n\r\n  @Input()\r\n  center$: Observable<any>;\r\n\r\n  @Input()\r\n  zoomToFit$: Observable<any>;\r\n\r\n  @Input()\r\n  layout: string | Layout;\r\n\r\n  @Input()\r\n  layoutSettings: any;\r\n\r\n  @Output()\r\n  activate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output()\r\n  deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('linkTemplate')\r\n  linkTemplate: TemplateRef<any>;\r\n\r\n  @ContentChild('nodeTemplate')\r\n  nodeTemplate: TemplateRef<any>;\r\n\r\n  @ContentChild('clusterTemplate')\r\n  clusterTemplate: TemplateRef<any>;\r\n\r\n  @ContentChild('defsTemplate')\r\n  defsTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild(ChartComponent, { read: ElementRef })\r\n  chart: ElementRef;\r\n\r\n  @ViewChildren('nodeElement')\r\n  nodeElements: QueryList<ElementRef>;\r\n\r\n  @ViewChildren('linkElement')\r\n  linkElements: QueryList<ElementRef>;\r\n\r\n  graphSubscription: Subscription = new Subscription();\r\n  subscriptions: Subscription[] = [];\r\n  colors: ColorHelper;\r\n  dims: ViewDimensions;\r\n  margin = [0, 0, 0, 0];\r\n  results = [];\r\n  seriesDomain: any;\r\n  transform: string;\r\n  legendOptions: any;\r\n  isPanning = false;\r\n  isDragging = false;\r\n  draggingNode: Node;\r\n  initialized = false;\r\n  graph: Graph;\r\n  graphDims: any = { width: 0, height: 0 };\r\n  _oldLinks: Edge[] = [];\r\n  transformationMatrix: Matrix = identity();\r\n  _touchLastX = null;\r\n  _touchLastY = null;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    public zone: NgZone,\r\n    public cd: ChangeDetectorRef,\r\n    private layoutService: LayoutService\r\n  ) {\r\n    super(el, zone, cd);\r\n  }\r\n\r\n  @Input()\r\n  groupResultsBy: (node: any) => string = node => node.label;\r\n\r\n  /**\r\n   * Get the current zoom level\r\n   */\r\n  get zoomLevel() {\r\n    return this.transformationMatrix.a;\r\n  }\r\n\r\n  /**\r\n   * Set the current zoom level\r\n   */\r\n  @Input('zoomLevel')\r\n  set zoomLevel(level) {\r\n    this.zoomTo(Number(level));\r\n  }\r\n\r\n  /**\r\n   * Get the current `x` position of the graph\r\n   */\r\n  get panOffsetX() {\r\n    return this.transformationMatrix.e;\r\n  }\r\n\r\n  /**\r\n   * Set the current `x` position of the graph\r\n   */\r\n  @Input('panOffsetX')\r\n  set panOffsetX(x) {\r\n    this.panTo(Number(x), null);\r\n  }\r\n\r\n  /**\r\n   * Get the current `y` position of the graph\r\n   */\r\n  get panOffsetY() {\r\n    return this.transformationMatrix.f;\r\n  }\r\n\r\n  /**\r\n   * Set the current `y` position of the graph\r\n   */\r\n  @Input('panOffsetY')\r\n  set panOffsetY(y) {\r\n    this.panTo(null, Number(y));\r\n  }\r\n\r\n  /**\r\n   * Angular lifecycle event\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  ngOnInit(): void {\r\n    if (this.update$) {\r\n      this.subscriptions.push(\r\n        this.update$.subscribe(() => {\r\n          this.update();\r\n        })\r\n      );\r\n    }\r\n\r\n    if (this.center$) {\r\n      this.subscriptions.push(\r\n        this.center$.subscribe(() => {\r\n          this.center();\r\n        })\r\n      );\r\n    }\r\n    if (this.zoomToFit$) {\r\n      this.subscriptions.push(\r\n        this.zoomToFit$.subscribe(() => {\r\n          this.zoomToFit();\r\n        })\r\n      );\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    console.log(changes);\r\n    const { layout, layoutSettings, nodes, clusters, links } = changes;\r\n    this.setLayout(this.layout);\r\n    if (layoutSettings) {\r\n      this.setLayoutSettings(this.layoutSettings);\r\n    }\r\n    if (nodes || clusters || links) {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  setLayout(layout: string | Layout): void {\r\n    this.initialized = false;\r\n    if (!layout) {\r\n      layout = 'dagre';\r\n    }\r\n    if (typeof layout === 'string') {\r\n      this.layout = this.layoutService.getLayout(layout);\r\n      this.setLayoutSettings(this.layoutSettings);\r\n    }\r\n  }\r\n\r\n  setLayoutSettings(settings: any): void {\r\n    if (this.layout && typeof this.layout !== 'string') {\r\n      this.layout.settings = settings;\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Angular lifecycle event\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    for (const sub of this.subscriptions) {\r\n      sub.unsubscribe();\r\n    }\r\n    this.subscriptions = null;\r\n  }\r\n\r\n  /**\r\n   * Angular lifecycle event\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  ngAfterViewInit(): void {\r\n    super.ngAfterViewInit();\r\n    setTimeout(() => this.update());\r\n  }\r\n\r\n  /**\r\n   * Base class update implementation for the dag graph\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.curve) {\r\n      this.curve = shape.curveBundle.beta(1);\r\n    }\r\n\r\n    this.zone.run(() => {\r\n      this.dims = calculateViewDimensions({\r\n        width: this.width,\r\n        height: this.height,\r\n        margins: this.margin,\r\n        showLegend: this.legend\r\n      });\r\n\r\n      this.seriesDomain = this.getSeriesDomain();\r\n      this.setColors();\r\n      this.legendOptions = this.getLegendOptions();\r\n\r\n      this.createGraph();\r\n      this.updateTransform();\r\n      this.initialized = true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Draws the graph using dagre layouts\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  draw(): void {\r\n    if (!this.layout || typeof this.layout === 'string') {\r\n      return;\r\n    }\r\n    // Calc view dims for the nodes\r\n    this.applyNodeDimensions();\r\n\r\n    // Recalc the layout\r\n    const result = this.layout.run(this.graph);\r\n    const result$ = result instanceof Observable ? result : of(result);\r\n    this.graphSubscription.add(\r\n      result$.subscribe(graph => {\r\n        this.graph = graph;\r\n        this.tick();\r\n      })\r\n    );\r\n    result$.pipe(first(graph => graph.nodes.length > 0)).subscribe(() => this.applyNodeDimensions());\r\n  }\r\n\r\n  tick() {\r\n    // Transposes view options to the node\r\n    this.graph.nodes.map(n => {\r\n      n.transform = `translate(${n.position.x - n.dimension.width / 2 || 0}, ${n.position.y - n.dimension.height / 2 ||\r\n        0})`;\r\n      if (!n.data) {\r\n        n.data = {};\r\n      }\r\n      if(!n.data.color){\r\n        \r\n        n.data = {\r\n          color: this.colors.getColor(this.groupResultsBy(n))\r\n        };\r\n      }\r\n    });\r\n    (this.graph.clusters || []).map(n => {\r\n      n.transform = `translate(${n.position.x - n.dimension.width / 2 || 0}, ${n.position.y - n.dimension.height / 2 ||\r\n        0})`;\r\n      if (!n.data) {\r\n        n.data = {};\r\n      }\r\n      if(!n.data.color){\r\n        \r\n      n.data = {\r\n        color: this.colors.getColor(this.groupResultsBy(n))\r\n      };\r\n    }\r\n    });\r\n\r\n    // Update the labels to the new positions\r\n    const newLinks = [];\r\n    for (const edgeLabelId in this.graph.edgeLabels) {\r\n      const edgeLabel = this.graph.edgeLabels[edgeLabelId];\r\n\r\n      const normKey = edgeLabelId.replace(/[^\\w-]*/g, '');\r\n      let oldLink = this._oldLinks.find(ol => `${ol.source}${ol.target}` === normKey);\r\n      if (!oldLink) {\r\n        oldLink = this.graph.edges.find(nl => `${nl.source}${nl.target}` === normKey) || edgeLabel;\r\n      }\r\n\r\n      oldLink.oldLine = oldLink.line;\r\n\r\n      const points = edgeLabel.points;\r\n      const line = this.generateLine(points);\r\n\r\n      const newLink = Object.assign({}, oldLink);\r\n      newLink.line = line;\r\n      newLink.points = points;\r\n\r\n      const textPos = points[Math.floor(points.length / 2)];\r\n      if (textPos) {\r\n        newLink.textTransform = `translate(${textPos.x || 0},${textPos.y || 0})`;\r\n      }\r\n\r\n      newLink.textAngle = 0;\r\n      if (!newLink.oldLine) {\r\n        newLink.oldLine = newLink.line;\r\n      }\r\n\r\n      this.calcDominantBaseline(newLink);\r\n      newLinks.push(newLink);\r\n    }\r\n\r\n    this.graph.edges = newLinks;\r\n\r\n    // Map the old links for animations\r\n    if (this.graph.edges) {\r\n      this._oldLinks = this.graph.edges.map(l => {\r\n        const newL = Object.assign({}, l);\r\n        newL.oldLine = l.line;\r\n        return newL;\r\n      });\r\n    }\r\n\r\n    // Calculate the height/width total\r\n    this.graphDims.width = Math.max(...this.graph.nodes.map(n => n.position.x + n.dimension.width));\r\n    this.graphDims.height = Math.max(...this.graph.nodes.map(n => n.position.y + n.dimension.height));\r\n\r\n    if (this.autoZoom) {\r\n      this.zoomToFit();\r\n    }\r\n\r\n    if (this.autoCenter) {\r\n      // Auto-center when rendering\r\n      this.center();\r\n    }\r\n\r\n    requestAnimationFrame(() => this.redrawLines());\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Measures the node element and applies the dimensions\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  applyNodeDimensions(): void {\r\n    if (this.nodeElements && this.nodeElements.length) {\r\n      this.nodeElements.map(elem => {\r\n        const nativeElement = elem.nativeElement;\r\n        const node = this.graph.nodes.find(n => n.id === nativeElement.id);\r\n\r\n        // calculate the height\r\n        let dims;\r\n        try {\r\n          dims = nativeElement.getBoundingClientRect();\r\n        } catch (ex) {\r\n          // Skip drawing if element is not displayed - Firefox would throw an error here\r\n          return;\r\n        }\r\n        if (this.nodeHeight) {\r\n          node.dimension.height = this.nodeHeight;\r\n        } else {\r\n          node.dimension.height = dims.height;\r\n        }\r\n\r\n        if (this.nodeMaxHeight) {\r\n          node.dimension.height = Math.max(node.dimension.height, this.nodeMaxHeight);\r\n        }\r\n        if (this.nodeMinHeight) {\r\n          node.dimension.height = Math.min(node.dimension.height, this.nodeMinHeight);\r\n        }\r\n\r\n        if (this.nodeWidth) {\r\n          node.dimension.width = this.nodeWidth;\r\n        } else {\r\n          // calculate the width\r\n          if (nativeElement.getElementsByTagName('text').length) {\r\n            let textDims;\r\n            try {\r\n              textDims = nativeElement.getElementsByTagName('text')[0].getBBox();\r\n            } catch (ex) {\r\n              // Skip drawing if element is not displayed - Firefox would throw an error here\r\n              return;\r\n            }\r\n            node.dimension.width = textDims.width + 20;\r\n          } else {\r\n            node.dimension.width = dims.width;\r\n          }\r\n        }\r\n\r\n        if (this.nodeMaxWidth) {\r\n          node.dimension.width = Math.max(node.dimension.width, this.nodeMaxWidth);\r\n        }\r\n        if (this.nodeMinWidth) {\r\n          node.dimension.width = Math.min(node.dimension.width, this.nodeMinWidth);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Redraws the lines when dragged or viewport updated\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  redrawLines(_animate = true): void {\r\n    this.linkElements.map(linkEl => {\r\n      const edge = this.graph.edges.find(lin => lin.id === linkEl.nativeElement.id);\r\n\r\n      if (edge) {\r\n        const linkSelection = select(linkEl.nativeElement).select('.line');\r\n        linkSelection\r\n          .attr('d', edge.oldLine)\r\n          .transition()\r\n          .duration(_animate ? 500 : 0)\r\n          .attr('d', edge.line);\r\n\r\n        const textPathSelection = select(this.chartElement.nativeElement).select(`#${edge.id}`);\r\n        textPathSelection\r\n          .attr('d', edge.oldTextPath)\r\n          .transition()\r\n          .duration(_animate ? 500 : 0)\r\n          .attr('d', edge.textPath);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates the dagre graph engine\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  createGraph(): void {\r\n    this.graphSubscription.unsubscribe();\r\n    this.graphSubscription = new Subscription();\r\n    const initializeNode = n => {\r\n      if (!n.id) {\r\n        n.id = id();\r\n      }\r\n      n.dimension = {\r\n        width: 30,\r\n        height: 30\r\n      };\r\n      n.position = {\r\n        x: 0,\r\n        y: 0\r\n      };\r\n      n.data = n.data ? n.data : {};\r\n      return n;\r\n    };\r\n    this.graph = {\r\n      nodes: [...this.nodes].map(initializeNode),\r\n      clusters: [...(this.clusters || [])].map(initializeNode),\r\n      edges: [...this.links].map(e => {\r\n        if (!e.id) {\r\n          e.id = id();\r\n        }\r\n        return e;\r\n      })\r\n    };\r\n\r\n    requestAnimationFrame(() => this.draw());\r\n  }\r\n\r\n  /**\r\n   * Calculate the text directions / flipping\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  calcDominantBaseline(link): void {\r\n    const firstPoint = link.points[0];\r\n    const lastPoint = link.points[link.points.length - 1];\r\n    link.oldTextPath = link.textPath;\r\n\r\n    if (lastPoint.x < firstPoint.x) {\r\n      link.dominantBaseline = 'text-before-edge';\r\n\r\n      // reverse text path for when its flipped upside down\r\n      link.textPath = this.generateLine([...link.points].reverse());\r\n    } else {\r\n      link.dominantBaseline = 'text-after-edge';\r\n      link.textPath = link.line;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate the new line path\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  generateLine(points): any {\r\n    const lineFunction = shape\r\n      .line<any>()\r\n      .x(d => d.x)\r\n      .y(d => d.y)\r\n      .curve(this.curve);\r\n    return lineFunction(points);\r\n  }\r\n\r\n  /**\r\n   * Zoom was invoked from event\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onZoom($event: MouseEvent, direction): void {\r\n    const zoomFactor = 1 + (direction === 'in' ? this.zoomSpeed : -this.zoomSpeed);\r\n\r\n    // Check that zooming wouldn't put us out of bounds\r\n    const newZoomLevel = this.zoomLevel * zoomFactor;\r\n    if (newZoomLevel <= this.minZoomLevel || newZoomLevel >= this.maxZoomLevel) {\r\n      return;\r\n    }\r\n\r\n    // Check if zooming is enabled or not\r\n    if (!this.enableZoom) {\r\n      return;\r\n    }\r\n\r\n    if (this.panOnZoom === true && $event) {\r\n      // Absolute mouse X/Y on the screen\r\n      const mouseX = $event.clientX;\r\n      const mouseY = $event.clientY;\r\n\r\n      // Transform the mouse X/Y into a SVG X/Y\r\n      const svg = this.chart.nativeElement.querySelector('svg');\r\n      const svgGroup = svg.querySelector('g.chart');\r\n\r\n      const point = svg.createSVGPoint();\r\n      point.x = mouseX;\r\n      point.y = mouseY;\r\n      const svgPoint = point.matrixTransform(svgGroup.getScreenCTM().inverse());\r\n\r\n      // Panzoom\r\n      const NO_ZOOM_LEVEL = 1;\r\n      this.pan(svgPoint.x, svgPoint.y, NO_ZOOM_LEVEL);\r\n      this.zoom(zoomFactor);\r\n      this.pan(-svgPoint.x, -svgPoint.y, NO_ZOOM_LEVEL);\r\n    } else {\r\n      this.zoom(zoomFactor);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pan by x/y\r\n   *\r\n   */\r\n  pan(x: number, y: number, zoomLevel: number = this.zoomLevel): void {\r\n    this.transformationMatrix = transform(this.transformationMatrix, translate(x / zoomLevel, y / zoomLevel));\r\n\r\n    this.updateTransform();\r\n  }\r\n\r\n  /**\r\n   * Pan to a fixed x/y\r\n   *\r\n   */\r\n  panTo(x: number, y: number): void {\r\n    this.transformationMatrix.e = x === null || x === undefined || isNaN(x) ? this.transformationMatrix.e : Number(x);\r\n    this.transformationMatrix.f = y === null || y === undefined || isNaN(y) ? this.transformationMatrix.f : Number(y);\r\n\r\n    this.updateTransform();\r\n  }\r\n\r\n  /**\r\n   * Zoom by a factor\r\n   *\r\n   */\r\n  zoom(factor: number): void {\r\n    this.transformationMatrix = transform(this.transformationMatrix, scale(factor, factor));\r\n\r\n    this.updateTransform();\r\n  }\r\n\r\n  /**\r\n   * Zoom to a fixed level\r\n   *\r\n   */\r\n  zoomTo(level: number): void {\r\n    this.transformationMatrix.a = isNaN(level) ? this.transformationMatrix.a : Number(level);\r\n    this.transformationMatrix.d = isNaN(level) ? this.transformationMatrix.d : Number(level);\r\n\r\n    this.updateTransform();\r\n  }\r\n\r\n  /**\r\n   * Pan was invoked from event\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onPan(event): void {\r\n    this.pan(event.movementX, event.movementY);\r\n  }\r\n\r\n  /**\r\n   * Drag was invoked from an event\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onDrag(event): void {\r\n    if (!this.draggingEnabled) {\r\n      return;\r\n    }\r\n    const node = this.draggingNode;\r\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDrag) {\r\n      this.layout.onDrag(node, event);\r\n    }\r\n\r\n    node.position.x += event.movementX / this.zoomLevel;\r\n    node.position.y += event.movementY / this.zoomLevel;\r\n\r\n    // move the node\r\n    const x = node.position.x - node.dimension.width / 2;\r\n    const y = node.position.y - node.dimension.height / 2;\r\n    node.transform = `translate(${x}, ${y})`;\r\n\r\n    for (const link of this.graph.edges) {\r\n      if (\r\n        link.target === node.id ||\r\n        link.source === node.id ||\r\n        (link.target as any).id === node.id ||\r\n        (link.source as any).id === node.id\r\n      ) {\r\n        if (this.layout && typeof this.layout !== 'string') {\r\n          const result = this.layout.updateEdge(this.graph, link);\r\n          const result$ = result instanceof Observable ? result : of(result);\r\n          this.graphSubscription.add(\r\n            result$.subscribe(graph => {\r\n              this.graph = graph;\r\n              this.redrawEdge(link);\r\n            })\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    this.redrawLines(false);\r\n  }\r\n\r\n  redrawEdge(edge: Edge) {\r\n    const line = this.generateLine(edge.points);\r\n    this.calcDominantBaseline(edge);\r\n    edge.oldLine = edge.line;\r\n    edge.line = line;\r\n  }\r\n\r\n  /**\r\n   * Update the entire view for the new pan position\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  updateTransform(): void {\r\n    this.transform = toSVG(this.transformationMatrix);\r\n  }\r\n\r\n  /**\r\n   * Node was clicked\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onClick(event, originalEvent): void {\r\n    event.origEvent = originalEvent;\r\n    this.select.emit(event);\r\n  }\r\n\r\n  /**\r\n   * Node was clicked\r\n   *\r\n   */\r\n  onDoubleClick(event, originalEvent): void {\r\n    event.origEvent = originalEvent;\r\n    event.isDoubleClick = true;\r\n    this.select.emit(event);\r\n  }\r\n\r\n  /**\r\n   * Node was focused\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onActivate(event): void {\r\n    if (this.activeEntries.indexOf(event) > -1) {\r\n      return;\r\n    }\r\n    this.activeEntries = [event, ...this.activeEntries];\r\n    this.activate.emit({ value: event, entries: this.activeEntries });\r\n  }\r\n\r\n  /**\r\n   * Node was defocused\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onDeactivate(event): void {\r\n    const idx = this.activeEntries.indexOf(event);\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: event, entries: this.activeEntries });\r\n  }\r\n\r\n  /**\r\n   * Get the domain series for the nodes\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  getSeriesDomain(): any[] {\r\n    return this.nodes\r\n      .map(d => this.groupResultsBy(d))\r\n      .reduce((nodes: string[], node): any[] => (nodes.indexOf(node) !== -1 ? nodes : nodes.concat([node])), [])\r\n      .sort();\r\n  }\r\n\r\n  /**\r\n   * Tracking for the link\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  trackLinkBy(index, link): any {\r\n    return link.id;\r\n  }\r\n\r\n  /**\r\n   * Tracking for the node\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  trackNodeBy(index, node): any {\r\n    return node.id;\r\n  }\r\n\r\n  /**\r\n   * Sets the colors the nodes\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.seriesDomain, this.customColors);\r\n  }\r\n\r\n  /**\r\n   * Gets the legend options\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  getLegendOptions(): any {\r\n    return {\r\n      scaleType: 'ordinal',\r\n      domain: this.seriesDomain,\r\n      colors: this.colors\r\n    };\r\n  }\r\n\r\n  /**\r\n   * On mouse move event, used for panning and dragging.\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  @HostListener('document:mousemove', ['$event'])\r\n  onMouseMove($event: MouseEvent): void {\r\n    if (this.isPanning && this.panningEnabled) {\r\n      this.onPan($event);\r\n    } else if (this.isDragging && this.draggingEnabled) {\r\n      this.onDrag($event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On touch start event to enable panning.\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onTouchStart(event) {\r\n    this._touchLastX = event.changedTouches[0].clientX;\r\n    this._touchLastY = event.changedTouches[0].clientY;\r\n\r\n    this.isPanning = true;\r\n  }\r\n\r\n  /**\r\n   * On touch move event, used for panning.\r\n   *\r\n   */\r\n  @HostListener('document:touchmove', ['$event'])\r\n  onTouchMove($event: TouchEvent): void {\r\n    if (this.isPanning && this.panningEnabled) {\r\n      const clientX = $event.changedTouches[0].clientX;\r\n      const clientY = $event.changedTouches[0].clientY;\r\n      const movementX = clientX - this._touchLastX;\r\n      const movementY = clientY - this._touchLastY;\r\n      this._touchLastX = clientX;\r\n      this._touchLastY = clientY;\r\n\r\n      this.pan(movementX, movementY);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On touch end event to disable panning.\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onTouchEnd(event) {\r\n    this.isPanning = false;\r\n  }\r\n\r\n  /**\r\n   * On mouse up event to disable panning/dragging.\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  @HostListener('document:mouseup')\r\n  onMouseUp(event: MouseEvent): void {\r\n    this.isDragging = false;\r\n    this.isPanning = false;\r\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDragEnd) {\r\n      this.layout.onDragEnd(this.draggingNode, event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On node mouse down to kick off dragging\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onNodeMouseDown(event: MouseEvent, node: any): void {\r\n    if (!this.draggingEnabled) {\r\n      return;\r\n    }\r\n    this.isDragging = true;\r\n    this.draggingNode = node;\r\n\r\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDragStart) {\r\n      this.layout.onDragStart(node, event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Center the graph in the viewport\r\n   */\r\n  center(): void {\r\n    this.panTo(\r\n      this.dims.width / 2 - (this.graphDims.width * this.zoomLevel) / 2,\r\n      this.dims.height / 2 - (this.graphDims.height * this.zoomLevel) / 2\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Zooms to fit the entier graph\r\n   */\r\n  zoomToFit(): void {\r\n    const heightZoom = this.dims.height / this.graphDims.height;\r\n    const widthZoom = this.dims.width / this.graphDims.width;\r\n    const zoomLevel = Math.min(heightZoom, widthZoom, 1);\r\n    if (zoomLevel !== this.zoomLevel) {\r\n      this.zoomLevel = zoomLevel;\r\n      this.updateTransform();\r\n    }\r\n  }\r\n}\r\n","import { Directive, Output, HostListener, EventEmitter } from '@angular/core';\r\n\r\n/**\r\n * Mousewheel directive\r\n * https://github.com/SodhanaLibrary/angular2-examples/blob/master/app/mouseWheelDirective/mousewheel.directive.ts\r\n *\r\n * @export\r\n */\r\n@Directive({ selector: '[mouseWheel]' })\r\nexport class MouseWheelDirective {\r\n  @Output()\r\n  mouseWheelUp = new EventEmitter();\r\n  @Output()\r\n  mouseWheelDown = new EventEmitter();\r\n\r\n  @HostListener('mousewheel', ['$event'])\r\n  onMouseWheelChrome(event: any): void {\r\n    this.mouseWheelFunc(event);\r\n  }\r\n\r\n  @HostListener('DOMMouseScroll', ['$event'])\r\n  onMouseWheelFirefox(event: any): void {\r\n    this.mouseWheelFunc(event);\r\n  }\r\n\r\n  @HostListener('onmousewheel', ['$event'])\r\n  onMouseWheelIE(event: any): void {\r\n    this.mouseWheelFunc(event);\r\n  }\r\n\r\n  mouseWheelFunc(event: any): void {\r\n    if (window.event) {\r\n      event = window.event;\r\n    }\r\n\r\n    const delta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\r\n    if (delta > 0) {\r\n      this.mouseWheelUp.emit(event);\r\n    } else if (delta < 0) {\r\n      this.mouseWheelDown.emit(event);\r\n    }\r\n\r\n    // for IE\r\n    event.returnValue = false;\r\n\r\n    // for Chrome and Firefox\r\n    if (event.preventDefault) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { GraphComponent } from './graph.component';\r\nimport { ChartCommonModule } from '@swimlane/ngx-charts';\r\nimport { MouseWheelDirective } from './mouse-wheel.directive';\r\nimport { LayoutService } from './layouts/layout.service';\r\nexport { GraphComponent };\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [GraphComponent, MouseWheelDirective],\r\n  exports: [GraphComponent, MouseWheelDirective],\r\n  providers: [LayoutService]\r\n})\r\nexport class GraphModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { GraphModule } from './graph/graph.module';\r\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\r\n\r\nexport * from './models/index';\r\n\r\n@NgModule({\r\n  imports: [NgxChartsModule],\r\n  exports: [GraphModule]\r\n})\r\nexport class NgxGraphModule {}\r\n"]}