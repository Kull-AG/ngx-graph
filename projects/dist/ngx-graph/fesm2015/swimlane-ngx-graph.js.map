{"version":3,"file":"swimlane-ngx-graph.js.map","sources":["ng://@swimlane/ngx-graph/lib/utils/id.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/dagre.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/dagreCluster.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/dagreNodesOnly.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/layout.service.ts","ng://@swimlane/ngx-graph/lib/graph/graph.component.ts","ng://@swimlane/ngx-graph/lib/graph/mouse-wheel.directive.ts","ng://@swimlane/ngx-graph/lib/graph/graph.module.ts","ng://@swimlane/ngx-graph/lib/ngx-graph.module.ts"],"sourcesContent":["const cache = {};\r\n\r\n/**\r\n * Generates a short id.\r\n *\r\n */\r\nexport function id(): string {\r\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\r\n\r\n  newId = `a${newId}`;\r\n\r\n  // ensure not already used\r\n  if (!cache[newId]) {\r\n    cache[newId] = true;\r\n    return newId;\r\n  }\r\n\r\n  return id();\r\n}\r\n","import { Layout } from '../../models/layout.model';\r\nimport { Graph } from '../../models/graph.model';\r\nimport { id } from '../../utils/id';\r\nimport * as dagre from 'dagre';\r\nimport { Edge } from '../../models/edge.model';\r\n\r\nexport enum Orientation {\r\n  LEFT_TO_RIGHT = 'LR',\r\n  RIGHT_TO_LEFT = 'RL',\r\n  TOP_TO_BOTTOM = 'TB',\r\n  BOTTOM_TO_TOM = 'BT'\r\n}\r\nexport enum Alignment {\r\n  CENTER = 'C',\r\n  UP_LEFT = 'UL',\r\n  UP_RIGHT = 'UR',\r\n  DOWN_LEFT = 'DL',\r\n  DOWN_RIGHT = 'DR'\r\n}\r\n\r\nexport interface DagreSettings {\r\n  orientation?: Orientation;\r\n  marginX?: number;\r\n  marginY?: number;\r\n  edgePadding?: number;\r\n  rankPadding?: number;\r\n  nodePadding?: number;\r\n  align?: Alignment;\r\n  acyclicer?: 'greedy' | undefined;\r\n  ranker?: 'network-simplex' | 'tight-tree' | 'longest-path';\r\n}\r\n\r\nexport class DagreLayout implements Layout {\r\n  defaultSettings: DagreSettings = {\r\n    orientation: Orientation.LEFT_TO_RIGHT,\r\n    marginX: 20,\r\n    marginY: 20,\r\n    edgePadding: 100,\r\n    rankPadding: 100,\r\n    nodePadding: 50\r\n  };\r\n  settings: DagreSettings = {};\r\n\r\n  dagreGraph: any;\r\n  dagreNodes: any;\r\n  dagreEdges: any;\r\n\r\n  run(graph: Graph): Graph {\r\n    this.createDagreGraph(graph);\r\n    dagre.layout(this.dagreGraph);\r\n\r\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\r\n\r\n    for (const dagreNodeId in this.dagreGraph._nodes) {\r\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\r\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\r\n      node.position = {\r\n        x: dagreNode.x,\r\n        y: dagreNode.y\r\n      };\r\n      node.dimension = {\r\n        width: dagreNode.width,\r\n        height: dagreNode.height\r\n      };\r\n    }\r\n\r\n    return graph;\r\n  }\r\n\r\n  updateEdge(graph: Graph, edge: Edge): Graph {\r\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\r\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\r\n\r\n    // determine new arrow position\r\n    const dir = sourceNode.position.y <= targetNode.position.y ? -1 : 1;\r\n    const startingPoint = {\r\n      x: sourceNode.position.x,\r\n      y: sourceNode.position.y - dir * (sourceNode.dimension.height / 2)\r\n    };\r\n    const endingPoint = {\r\n      x: targetNode.position.x,\r\n      y: targetNode.position.y + dir * (targetNode.dimension.height / 2)\r\n    };\r\n\r\n    // generate new points\r\n    edge.points = [startingPoint, endingPoint];\r\n    return graph;\r\n  }\r\n\r\n  createDagreGraph(graph: Graph): any {\r\n    this.dagreGraph = new dagre.graphlib.Graph();\r\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\r\n    this.dagreGraph.setGraph({\r\n      rankdir: settings.orientation,\r\n      marginx: settings.marginX,\r\n      marginy: settings.marginY,\r\n      edgesep: settings.edgePadding,\r\n      ranksep: settings.rankPadding,\r\n      nodesep: settings.nodePadding,\r\n      align: settings.align,\r\n      acyclicer: settings.acyclicer,\r\n      ranker: settings.ranker\r\n    });\r\n\r\n    // Default to assigning a new object as a label for each new edge.\r\n    this.dagreGraph.setDefaultEdgeLabel(() => {\r\n      return {\r\n        /* empty */\r\n      };\r\n    });\r\n\r\n    this.dagreNodes = graph.nodes.map(n => {\r\n      const node: any = Object.assign({}, n);\r\n      node.width = n.dimension.width;\r\n      node.height = n.dimension.height;\r\n      node.x = n.position.x;\r\n      node.y = n.position.y;\r\n      return node;\r\n    });\r\n\r\n    this.dagreEdges = graph.edges.map(l => {\r\n      const newLink: any = Object.assign({}, l);\r\n      if (!newLink.id) {\r\n        newLink.id = id();\r\n      }\r\n      return newLink;\r\n    });\r\n\r\n    for (const node of this.dagreNodes) {\r\n      if (!node.width) {\r\n        node.width = 20;\r\n      }\r\n      if (!node.height) {\r\n        node.height = 30;\r\n      }\r\n\r\n      // update dagre\r\n      this.dagreGraph.setNode(node.id, node);\r\n    }\r\n\r\n    // update dagre\r\n    for (const edge of this.dagreEdges) {\r\n      this.dagreGraph.setEdge(edge.source, edge.target);\r\n    }\r\n\r\n    return this.dagreGraph;\r\n  }\r\n}\r\n","import { Layout } from '../../models/layout.model';\r\nimport { Graph } from '../../models/graph.model';\r\nimport { id } from '../../utils/id';\r\nimport * as dagre from 'dagre';\r\nimport { Edge } from '../../models/edge.model';\r\nimport { Node, ClusterNode } from '../../models/node.model';\r\nimport { DagreSettings, Orientation } from './dagre';\r\n\r\nexport class DagreClusterLayout implements Layout {\r\n  defaultSettings: DagreSettings = {\r\n    orientation: Orientation.LEFT_TO_RIGHT,\r\n    marginX: 20,\r\n    marginY: 20,\r\n    edgePadding: 100,\r\n    rankPadding: 100,\r\n    nodePadding: 50\r\n  };\r\n  settings: DagreSettings = {};\r\n\r\n  dagreGraph: any;\r\n  dagreNodes: Node[];\r\n  dagreClusters: ClusterNode[];\r\n  dagreEdges: any;\r\n\r\n  run(graph: Graph): Graph {\r\n    this.createDagreGraph(graph);\r\n    dagre.layout(this.dagreGraph);\r\n\r\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\r\n\r\n    const dagreToOutput = node => {\r\n      const dagreNode = this.dagreGraph._nodes[node.id];\r\n      return {\r\n        ...node,\r\n        position: {\r\n          x: dagreNode.x,\r\n          y: dagreNode.y\r\n        },\r\n        dimension: {\r\n          width: dagreNode.width,\r\n          height: dagreNode.height\r\n        }\r\n      };\r\n    };\r\n    graph.clusters = (graph.clusters || []).map(dagreToOutput);\r\n    graph.nodes = graph.nodes.map(dagreToOutput);\r\n\r\n    return graph;\r\n  }\r\n\r\n  updateEdge(graph: Graph, edge: Edge): Graph {\r\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\r\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\r\n\r\n    // determine new arrow position\r\n    const dir = sourceNode.position.y <= targetNode.position.y ? -1 : 1;\r\n    const startingPoint = {\r\n      x: sourceNode.position.x,\r\n      y: sourceNode.position.y - dir * (sourceNode.dimension.height / 2)\r\n    };\r\n    const endingPoint = {\r\n      x: targetNode.position.x,\r\n      y: targetNode.position.y + dir * (targetNode.dimension.height / 2)\r\n    };\r\n\r\n    // generate new points\r\n    edge.points = [startingPoint, endingPoint];\r\n    return graph;\r\n  }\r\n\r\n  createDagreGraph(graph: Graph): any {\r\n    this.dagreGraph = new dagre.graphlib.Graph({ compound: true });\r\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\r\n    this.dagreGraph.setGraph({\r\n      rankdir: settings.orientation,\r\n      marginx: settings.marginX,\r\n      marginy: settings.marginY,\r\n      edgesep: settings.edgePadding,\r\n      ranksep: settings.rankPadding,\r\n      nodesep: settings.nodePadding,\r\n      align: settings.align,\r\n      acyclicer: settings.acyclicer,\r\n      ranker: settings.ranker\r\n    });\r\n\r\n    // Default to assigning a new object as a label for each new edge.\r\n    this.dagreGraph.setDefaultEdgeLabel(() => {\r\n      return {\r\n        /* empty */\r\n      };\r\n    });\r\n\r\n    this.dagreNodes = graph.nodes.map((n: Node) => {\r\n      const node: any = Object.assign({}, n);\r\n      node.width = n.dimension.width;\r\n      node.height = n.dimension.height;\r\n      node.x = n.position.x;\r\n      node.y = n.position.y;\r\n      return node;\r\n    });\r\n\r\n    this.dagreClusters = graph.clusters || [];\r\n\r\n    this.dagreEdges = graph.edges.map(l => {\r\n      const newLink: any = Object.assign({}, l);\r\n      if (!newLink.id) {\r\n        newLink.id = id();\r\n      }\r\n      return newLink;\r\n    });\r\n\r\n    for (const node of this.dagreNodes) {\r\n      this.dagreGraph.setNode(node.id, node);\r\n    }\r\n\r\n    for (const cluster of this.dagreClusters) {\r\n      this.dagreGraph.setNode(cluster.id, cluster);\r\n      cluster.childNodeIds.forEach(childNodeId => {\r\n        this.dagreGraph.setParent(childNodeId, cluster.id);\r\n      });\r\n    }\r\n\r\n    // update dagre\r\n    for (const edge of this.dagreEdges) {\r\n      this.dagreGraph.setEdge(edge.source, edge.target);\r\n    }\r\n\r\n    return this.dagreGraph;\r\n  }\r\n}\r\n","import { Layout } from '../../models/layout.model';\r\nimport { Graph } from '../../models/graph.model';\r\nimport { id } from '../../utils/id';\r\nimport * as dagre from 'dagre';\r\nimport { Edge } from '../../models/edge.model';\r\n\r\nexport enum Orientation {\r\n  LEFT_TO_RIGHT = 'LR',\r\n  RIGHT_TO_LEFT = 'RL',\r\n  TOP_TO_BOTTOM = 'TB',\r\n  BOTTOM_TO_TOM = 'BT'\r\n}\r\nexport enum Alignment {\r\n  CENTER = 'C',\r\n  UP_LEFT = 'UL',\r\n  UP_RIGHT = 'UR',\r\n  DOWN_LEFT = 'DL',\r\n  DOWN_RIGHT = 'DR'\r\n}\r\n\r\nexport interface DagreSettings {\r\n  orientation?: Orientation;\r\n  marginX?: number;\r\n  marginY?: number;\r\n  edgePadding?: number;\r\n  rankPadding?: number;\r\n  nodePadding?: number;\r\n  align?: Alignment;\r\n  acyclicer?: 'greedy' | undefined;\r\n  ranker?: 'network-simplex' | 'tight-tree' | 'longest-path';\r\n}\r\n\r\nexport interface DagreNodesOnlySettings extends DagreSettings {\r\n  curveDistance?: number;\r\n}\r\n\r\nconst DEFAULT_EDGE_NAME = '\\x00';\r\nconst GRAPH_NODE = '\\x00';\r\nconst EDGE_KEY_DELIM = '\\x01';\r\n\r\nexport class DagreNodesOnlyLayout implements Layout {\r\n  defaultSettings: DagreNodesOnlySettings = {\r\n    orientation: Orientation.LEFT_TO_RIGHT,\r\n    marginX: 20,\r\n    marginY: 20,\r\n    edgePadding: 100,\r\n    rankPadding: 100,\r\n    nodePadding: 50,\r\n    curveDistance: 20\r\n  };\r\n  settings: DagreNodesOnlySettings = {};\r\n\r\n  dagreGraph: any;\r\n  dagreNodes: any;\r\n  dagreEdges: any;\r\n\r\n  run(graph: Graph): Graph {\r\n    this.createDagreGraph(graph);\r\n    dagre.layout(this.dagreGraph);\r\n\r\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\r\n\r\n    for (const dagreNodeId in this.dagreGraph._nodes) {\r\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\r\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\r\n      node.position = {\r\n        x: dagreNode.x,\r\n        y: dagreNode.y\r\n      };\r\n      node.dimension = {\r\n        width: dagreNode.width,\r\n        height: dagreNode.height\r\n      };\r\n    }\r\n    for (const edge of graph.edges) {\r\n      this.updateEdge(graph, edge);\r\n    }\r\n\r\n    return graph;\r\n  }\r\n\r\n  updateEdge(graph: Graph, edge: Edge): Graph {\r\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\r\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\r\n    const rankAxis: 'x' | 'y' = this.settings.orientation === 'BT' || this.settings.orientation === 'TB' ? 'y' : 'x';\r\n    const orderAxis: 'x' | 'y' = rankAxis === 'y' ? 'x' : 'y';\r\n    const rankDimension = rankAxis === 'y' ? 'height' : 'width';\r\n    // determine new arrow position\r\n    const dir = sourceNode.position[rankAxis] <= targetNode.position[rankAxis] ? -1 : 1;\r\n    const startingPoint = {\r\n      [orderAxis]: sourceNode.position[orderAxis],\r\n      [rankAxis]: sourceNode.position[rankAxis] - dir * (sourceNode.dimension[rankDimension] / 2)\r\n    };\r\n    const endingPoint = {\r\n      [orderAxis]: targetNode.position[orderAxis],\r\n      [rankAxis]: targetNode.position[rankAxis] + dir * (targetNode.dimension[rankDimension] / 2)\r\n    };\r\n\r\n    const curveDistance = this.settings.curveDistance || this.defaultSettings.curveDistance;\r\n    // generate new points\r\n    edge.points = [\r\n      startingPoint,\r\n      {\r\n        [orderAxis]: startingPoint[orderAxis],\r\n        [rankAxis]: startingPoint[rankAxis] - dir * curveDistance\r\n      },\r\n      {\r\n        [orderAxis]: endingPoint[orderAxis],\r\n        [rankAxis]: endingPoint[rankAxis] + dir * curveDistance\r\n      },\r\n      endingPoint\r\n    ];\r\n    const edgeLabelId = `${edge.source}${EDGE_KEY_DELIM}${edge.target}${EDGE_KEY_DELIM}${DEFAULT_EDGE_NAME}`;\r\n    const matchingEdgeLabel = graph.edgeLabels[edgeLabelId];\r\n    if (matchingEdgeLabel) {\r\n      matchingEdgeLabel.points = edge.points;\r\n    }\r\n    return graph;\r\n  }\r\n\r\n  createDagreGraph(graph: Graph): any {\r\n    this.dagreGraph = new dagre.graphlib.Graph();\r\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\r\n    this.dagreGraph.setGraph({\r\n      rankdir: settings.orientation,\r\n      marginx: settings.marginX,\r\n      marginy: settings.marginY,\r\n      edgesep: settings.edgePadding,\r\n      ranksep: settings.rankPadding,\r\n      nodesep: settings.nodePadding,\r\n      align: settings.align,\r\n      acyclicer: settings.acyclicer,\r\n      ranker: settings.ranker\r\n    });\r\n\r\n    // Default to assigning a new object as a label for each new edge.\r\n    this.dagreGraph.setDefaultEdgeLabel(() => {\r\n      return {\r\n        /* empty */\r\n      };\r\n    });\r\n\r\n    this.dagreNodes = graph.nodes.map(n => {\r\n      const node: any = Object.assign({}, n);\r\n      node.width = n.dimension.width;\r\n      node.height = n.dimension.height;\r\n      node.x = n.position.x;\r\n      node.y = n.position.y;\r\n      return node;\r\n    });\r\n\r\n    this.dagreEdges = graph.edges.map(l => {\r\n      const newLink: any = Object.assign({}, l);\r\n      if (!newLink.id) {\r\n        newLink.id = id();\r\n      }\r\n      return newLink;\r\n    });\r\n\r\n    for (const node of this.dagreNodes) {\r\n      if (!node.width) {\r\n        node.width = 20;\r\n      }\r\n      if (!node.height) {\r\n        node.height = 30;\r\n      }\r\n\r\n      // update dagre\r\n      this.dagreGraph.setNode(node.id, node);\r\n    }\r\n\r\n    // update dagre\r\n    for (const edge of this.dagreEdges) {\r\n      this.dagreGraph.setEdge(edge.source, edge.target);\r\n    }\r\n\r\n    return this.dagreGraph;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Layout } from '../../models/layout.model';\r\nimport { DagreLayout } from './dagre';\r\nimport { DagreClusterLayout } from './dagreCluster';\r\nimport { DagreNodesOnlyLayout } from './dagreNodesOnly';\r\n\r\nconst layouts = {\r\n  dagre: DagreLayout,\r\n  dagreCluster: DagreClusterLayout,\r\n  dagreNodesOnly: DagreNodesOnlyLayout,\r\n};\r\n\r\n@Injectable()\r\nexport class LayoutService {\r\n  getLayout(name: string): Layout {\r\n    if (layouts[name]) {\r\n      return new layouts[name]();\r\n    } else {\r\n      throw new Error(`Unknown layout type '${name}'`);\r\n    }\r\n  }\r\n}\r\n","// rename transition due to conflict with d3 transition\r\nimport { animate, style, transition as ngTransition, trigger } from '@angular/animations';\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewChildren,\r\n  ViewEncapsulation,\r\n  NgZone,\r\n  ChangeDetectorRef,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport {\r\n  BaseChartComponent,\r\n  ChartComponent,\r\n  ColorHelper,\r\n  ViewDimensions,\r\n  calculateViewDimensions\r\n} from '@swimlane/ngx-charts';\r\nimport { select } from 'd3-selection';\r\nimport * as shape from 'd3-shape';\r\nimport 'd3-transition';\r\nimport { Observable, Subscription, of } from 'rxjs';\r\nimport { first } from 'rxjs/operators';\r\nimport { identity, scale, toSVG, transform, translate } from 'transformation-matrix';\r\nimport { Layout } from '../models/layout.model';\r\nimport { LayoutService } from './layouts/layout.service';\r\nimport { Edge } from '../models/edge.model';\r\nimport { Node, ClusterNode } from '../models/node.model';\r\nimport { Graph } from '../models/graph.model';\r\nimport { id } from '../utils/id';\r\n\r\nconsole.log('EL REF', ElementRef);\r\n\r\n/**\r\n * Matrix\r\n */\r\nexport interface Matrix {\r\n  a: number;\r\n  b: number;\r\n  c: number;\r\n  d: number;\r\n  e: number;\r\n  f: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'ngx-graph',\r\n  styles: [`.graph{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.graph .edge{stroke:#666;fill:none}.graph .edge .edge-label{stroke:none;font-size:12px;fill:#251e1e}.graph .panning-rect{fill:transparent;cursor:move}.graph .node-group .node:focus{outline:0}.graph .cluster rect{opacity:.2}`],\r\n  template: `\r\n  <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"legend\" [legendOptions]=\"legendOptions\" (legendLabelClick)=\"onClick($event, undefined)\"\r\n  (legendLabelActivate)=\"onActivate($event)\" (legendLabelDeactivate)=\"onDeactivate($event)\" mouseWheel (mouseWheelUp)=\"onZoom($event, 'in')\"\r\n  (mouseWheelDown)=\"onZoom($event, 'out')\">\r\n  <svg:g *ngIf=\"initialized && graph\" [attr.transform]=\"transform\" (touchstart)=\"onTouchStart($event)\" (touchend)=\"onTouchEnd($event)\"\r\n    class=\"graph chart\">\r\n    <defs>\r\n      <ng-template *ngIf=\"defsTemplate\" [ngTemplateOutlet]=\"defsTemplate\">\r\n      </ng-template>\r\n      <svg:path class=\"text-path\" *ngFor=\"let link of graph.edges\" [attr.d]=\"link.textPath\" [attr.id]=\"link.id\">\r\n      </svg:path>\r\n    </defs>\r\n    <svg:rect class=\"panning-rect\" [attr.width]=\"dims.width * 100\" [attr.height]=\"dims.height * 100\" [attr.transform]=\"'translate(' + ((-dims.width || 0) * 50) +',' + ((-dims.height || 0) *50) + ')' \"\r\n      (mousedown)=\"isPanning = true\" />\r\n      <svg:g class=\"clusters\">\r\n        <svg:g #clusterElement *ngFor=\"let node of graph.clusters; trackBy: trackNodeBy\" class=\"node-group\" [id]=\"node.id\" [attr.transform]=\"node.transform\"\r\n          (click)=\"onClick(node,$event)\">\r\n          <ng-template *ngIf=\"clusterTemplate\" [ngTemplateOutlet]=\"clusterTemplate\" [ngTemplateOutletContext]=\"{ $implicit: node }\">\r\n          </ng-template>\r\n          <svg:g *ngIf=\"!clusterTemplate\" class=\"node cluster\">\r\n            <svg:rect [attr.width]=\"node.dimension.width\" [attr.height]=\"node.dimension.height\" [attr.fill]=\"node.data?.color\" />\r\n            <svg:text alignment-baseline=\"central\" [attr.x]=\"10\" [attr.y]=\"node.dimension.height / 2\">{{node.label}}</svg:text>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g class=\"links\">\r\n      <svg:g #linkElement *ngFor=\"let link of graph.edges; trackBy: trackLinkBy\" class=\"link-group\" [id]=\"link.id\">\r\n        <ng-template *ngIf=\"linkTemplate\" [ngTemplateOutlet]=\"linkTemplate\" [ngTemplateOutletContext]=\"{ $implicit: link }\">\r\n        </ng-template>\r\n        <svg:path *ngIf=\"!linkTemplate\" class=\"edge\" [attr.d]=\"link.line\" />\r\n      </svg:g>\r\n    </svg:g>\r\n    <svg:g class=\"nodes\">\r\n      <svg:g #nodeElement *ngFor=\"let node of graph.nodes; trackBy: trackNodeBy\" class=\"node-group\" [id]=\"node.id\" [attr.transform]=\"node.transform\"\r\n        (click)=\"onClick(node,$event)\" (mousedown)=\"onNodeMouseDown($event, node)\" (dblclick)=\"onDoubleClick(node,$event)\">\r\n        <ng-template *ngIf=\"nodeTemplate\" [ngTemplateOutlet]=\"nodeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: node }\">\r\n        </ng-template>\r\n        <svg:circle *ngIf=\"!nodeTemplate\" r=\"10\" [attr.cx]=\"node.dimension.width / 2\" [attr.cy]=\"node.dimension.height / 2\" [attr.fill]=\"node.data?.color\"\r\n        />\r\n      </svg:g>\r\n    </svg:g>\r\n  </svg:g>\r\n</ngx-charts-chart>\r\n  `,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [trigger('link', [ngTransition('* => *', [animate(500, style({ transform: '*' }))])])]\r\n})\r\nexport class GraphComponent extends BaseChartComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {\r\n  @Input()\r\n  legend: boolean = false;\r\n\r\n  @Input()\r\n  nodes: Node[] = [];\r\n\r\n  @Input()\r\n  clusters: ClusterNode[] = [];\r\n\r\n  @Input()\r\n  links: Edge[] = [];\r\n\r\n  @Input()\r\n  activeEntries: any[] = [];\r\n\r\n  @Input()\r\n  curve: any;\r\n\r\n  @Input()\r\n  draggingEnabled = true;\r\n\r\n  @Input()\r\n  nodeHeight: number;\r\n\r\n  @Input()\r\n  nodeMaxHeight: number;\r\n\r\n  @Input()\r\n  nodeMinHeight: number;\r\n\r\n  @Input()\r\n  nodeWidth: number;\r\n\r\n  @Input()\r\n  nodeMinWidth: number;\r\n\r\n  @Input()\r\n  nodeMaxWidth: number;\r\n\r\n  @Input()\r\n  panningEnabled = true;\r\n\r\n  @Input()\r\n  enableZoom = true;\r\n\r\n  @Input()\r\n  zoomSpeed = 0.1;\r\n\r\n  @Input()\r\n  minZoomLevel = 0.1;\r\n\r\n  @Input()\r\n  maxZoomLevel = 4.0;\r\n\r\n  @Input()\r\n  autoZoom = false;\r\n\r\n  @Input()\r\n  panOnZoom = true;\r\n\r\n  @Input()\r\n  autoCenter = false;\r\n\r\n  @Input()\r\n  update$: Observable<any>;\r\n\r\n  @Input()\r\n  center$: Observable<any>;\r\n\r\n  @Input()\r\n  zoomToFit$: Observable<any>;\r\n\r\n  @Input()\r\n  layout: string | Layout;\r\n\r\n  @Input()\r\n  layoutSettings: any;\r\n\r\n  @Output()\r\n  activate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output()\r\n  deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('linkTemplate')\r\n  linkTemplate: TemplateRef<any>;\r\n\r\n  @ContentChild('nodeTemplate')\r\n  nodeTemplate: TemplateRef<any>;\r\n\r\n  @ContentChild('clusterTemplate')\r\n  clusterTemplate: TemplateRef<any>;\r\n\r\n  @ContentChild('defsTemplate')\r\n  defsTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild(ChartComponent, { read: ElementRef })\r\n  chart: ElementRef;\r\n\r\n  @ViewChildren('nodeElement')\r\n  nodeElements: QueryList<ElementRef>;\r\n\r\n  @ViewChildren('linkElement')\r\n  linkElements: QueryList<ElementRef>;\r\n\r\n  graphSubscription: Subscription = new Subscription();\r\n  subscriptions: Subscription[] = [];\r\n  colors: ColorHelper;\r\n  dims: ViewDimensions;\r\n  margin = [0, 0, 0, 0];\r\n  results = [];\r\n  seriesDomain: any;\r\n  transform: string;\r\n  legendOptions: any;\r\n  isPanning = false;\r\n  isDragging = false;\r\n  draggingNode: Node;\r\n  initialized = false;\r\n  graph: Graph;\r\n  graphDims: any = { width: 0, height: 0 };\r\n  _oldLinks: Edge[] = [];\r\n  transformationMatrix: Matrix = identity();\r\n  _touchLastX = null;\r\n  _touchLastY = null;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    public zone: NgZone,\r\n    public cd: ChangeDetectorRef,\r\n    private layoutService: LayoutService\r\n  ) {\r\n    super(el, zone, cd);\r\n  }\r\n\r\n  @Input()\r\n  groupResultsBy: (node: any) => string = node => node.label;\r\n\r\n  /**\r\n   * Get the current zoom level\r\n   */\r\n  get zoomLevel() {\r\n    return this.transformationMatrix.a;\r\n  }\r\n\r\n  /**\r\n   * Set the current zoom level\r\n   */\r\n  @Input('zoomLevel')\r\n  set zoomLevel(level) {\r\n    this.zoomTo(Number(level));\r\n  }\r\n\r\n  /**\r\n   * Get the current `x` position of the graph\r\n   */\r\n  get panOffsetX() {\r\n    return this.transformationMatrix.e;\r\n  }\r\n\r\n  /**\r\n   * Set the current `x` position of the graph\r\n   */\r\n  @Input('panOffsetX')\r\n  set panOffsetX(x) {\r\n    this.panTo(Number(x), null);\r\n  }\r\n\r\n  /**\r\n   * Get the current `y` position of the graph\r\n   */\r\n  get panOffsetY() {\r\n    return this.transformationMatrix.f;\r\n  }\r\n\r\n  /**\r\n   * Set the current `y` position of the graph\r\n   */\r\n  @Input('panOffsetY')\r\n  set panOffsetY(y) {\r\n    this.panTo(null, Number(y));\r\n  }\r\n\r\n  /**\r\n   * Angular lifecycle event\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  ngOnInit(): void {\r\n    if (this.update$) {\r\n      this.subscriptions.push(\r\n        this.update$.subscribe(() => {\r\n          this.update();\r\n        })\r\n      );\r\n    }\r\n\r\n    if (this.center$) {\r\n      this.subscriptions.push(\r\n        this.center$.subscribe(() => {\r\n          this.center();\r\n        })\r\n      );\r\n    }\r\n    if (this.zoomToFit$) {\r\n      this.subscriptions.push(\r\n        this.zoomToFit$.subscribe(() => {\r\n          this.zoomToFit();\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    console.log(changes);\r\n    const { layout, layoutSettings, nodes, clusters, links } = changes;\r\n    this.setLayout(this.layout);\r\n    if (layoutSettings) {\r\n      this.setLayoutSettings(this.layoutSettings);\r\n    }\r\n    if (nodes || clusters || links) {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  setLayout(layout: string | Layout): void {\r\n    this.initialized = false;\r\n    if (!layout) {\r\n      layout = 'dagre';\r\n    }\r\n    if (typeof layout === 'string') {\r\n      this.layout = this.layoutService.getLayout(layout);\r\n      this.setLayoutSettings(this.layoutSettings);\r\n    }\r\n  }\r\n\r\n  setLayoutSettings(settings: any): void {\r\n    if (this.layout && typeof this.layout !== 'string') {\r\n      this.layout.settings = settings;\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Angular lifecycle event\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    for (const sub of this.subscriptions) {\r\n      sub.unsubscribe();\r\n    }\r\n    this.subscriptions = null;\r\n  }\r\n\r\n  /**\r\n   * Angular lifecycle event\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  ngAfterViewInit(): void {\r\n    super.ngAfterViewInit();\r\n    setTimeout(() => this.update());\r\n  }\r\n\r\n  /**\r\n   * Base class update implementation for the dag graph\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.curve) {\r\n      this.curve = shape.curveBundle.beta(1);\r\n    }\r\n\r\n    this.zone.run(() => {\r\n      this.dims = calculateViewDimensions({\r\n        width: this.width,\r\n        height: this.height,\r\n        margins: this.margin,\r\n        showLegend: this.legend\r\n      });\r\n\r\n      this.seriesDomain = this.getSeriesDomain();\r\n      this.setColors();\r\n      this.legendOptions = this.getLegendOptions();\r\n\r\n      this.createGraph();\r\n      this.updateTransform();\r\n      this.initialized = true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Draws the graph using dagre layouts\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  draw(): void {\r\n    if (!this.layout || typeof this.layout === 'string') {\r\n      return;\r\n    }\r\n    // Calc view dims for the nodes\r\n    this.applyNodeDimensions();\r\n\r\n    // Recalc the layout\r\n    const result = this.layout.run(this.graph);\r\n    const result$ = result instanceof Observable ? result : of(result);\r\n    this.graphSubscription.add(\r\n      result$.subscribe(graph => {\r\n        this.graph = graph;\r\n        this.tick();\r\n      })\r\n    );\r\n    result$.pipe(first(graph => graph.nodes.length > 0)).subscribe(() => this.applyNodeDimensions());\r\n  }\r\n\r\n  tick() {\r\n    // Transposes view options to the node\r\n    this.graph.nodes.map(n => {\r\n      n.transform = `translate(${n.position.x - n.dimension.width / 2 || 0}, ${n.position.y - n.dimension.height / 2 ||\r\n        0})`;\r\n      if (!n.data) {\r\n        n.data = {};\r\n      }\r\n      if(!n.data.color){\r\n        \r\n        n.data = {\r\n          color: this.colors.getColor(this.groupResultsBy(n))\r\n        };\r\n      }\r\n    });\r\n    (this.graph.clusters || []).map(n => {\r\n      n.transform = `translate(${n.position.x - n.dimension.width / 2 || 0}, ${n.position.y - n.dimension.height / 2 ||\r\n        0})`;\r\n      if (!n.data) {\r\n        n.data = {};\r\n      }\r\n      if(!n.data.color){\r\n        \r\n      n.data = {\r\n        color: this.colors.getColor(this.groupResultsBy(n))\r\n      };\r\n    }\r\n    });\r\n\r\n    // Update the labels to the new positions\r\n    const newLinks = [];\r\n    for (const edgeLabelId in this.graph.edgeLabels) {\r\n      const edgeLabel = this.graph.edgeLabels[edgeLabelId];\r\n\r\n      const normKey = edgeLabelId.replace(/[^\\w-]*/g, '');\r\n      let oldLink = this._oldLinks.find(ol => `${ol.source}${ol.target}` === normKey);\r\n      if (!oldLink) {\r\n        oldLink = this.graph.edges.find(nl => `${nl.source}${nl.target}` === normKey) || edgeLabel;\r\n      }\r\n\r\n      oldLink.oldLine = oldLink.line;\r\n\r\n      const points = edgeLabel.points;\r\n      const line = this.generateLine(points);\r\n\r\n      const newLink = Object.assign({}, oldLink);\r\n      newLink.line = line;\r\n      newLink.points = points;\r\n\r\n      const textPos = points[Math.floor(points.length / 2)];\r\n      if (textPos) {\r\n        newLink.textTransform = `translate(${textPos.x || 0},${textPos.y || 0})`;\r\n      }\r\n\r\n      newLink.textAngle = 0;\r\n      if (!newLink.oldLine) {\r\n        newLink.oldLine = newLink.line;\r\n      }\r\n\r\n      this.calcDominantBaseline(newLink);\r\n      newLinks.push(newLink);\r\n    }\r\n\r\n    this.graph.edges = newLinks;\r\n\r\n    // Map the old links for animations\r\n    if (this.graph.edges) {\r\n      this._oldLinks = this.graph.edges.map(l => {\r\n        const newL = Object.assign({}, l);\r\n        newL.oldLine = l.line;\r\n        return newL;\r\n      });\r\n    }\r\n\r\n    // Calculate the height/width total\r\n    this.graphDims.width = Math.max(...this.graph.nodes.map(n => n.position.x + n.dimension.width));\r\n    this.graphDims.height = Math.max(...this.graph.nodes.map(n => n.position.y + n.dimension.height));\r\n\r\n    if (this.autoZoom) {\r\n      this.zoomToFit();\r\n    }\r\n\r\n    if (this.autoCenter) {\r\n      // Auto-center when rendering\r\n      this.center();\r\n    }\r\n\r\n    requestAnimationFrame(() => this.redrawLines());\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Measures the node element and applies the dimensions\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  applyNodeDimensions(): void {\r\n    if (this.nodeElements && this.nodeElements.length) {\r\n      this.nodeElements.map(elem => {\r\n        const nativeElement = elem.nativeElement;\r\n        const node = this.graph.nodes.find(n => n.id === nativeElement.id);\r\n\r\n        // calculate the height\r\n        let dims;\r\n        try {\r\n          dims = nativeElement.getBoundingClientRect();\r\n        } catch (ex) {\r\n          // Skip drawing if element is not displayed - Firefox would throw an error here\r\n          return;\r\n        }\r\n        if (this.nodeHeight) {\r\n          node.dimension.height = this.nodeHeight;\r\n        } else {\r\n          node.dimension.height = dims.height;\r\n        }\r\n\r\n        if (this.nodeMaxHeight) {\r\n          node.dimension.height = Math.max(node.dimension.height, this.nodeMaxHeight);\r\n        }\r\n        if (this.nodeMinHeight) {\r\n          node.dimension.height = Math.min(node.dimension.height, this.nodeMinHeight);\r\n        }\r\n\r\n        if (this.nodeWidth) {\r\n          node.dimension.width = this.nodeWidth;\r\n        } else {\r\n          // calculate the width\r\n          if (nativeElement.getElementsByTagName('text').length) {\r\n            let textDims;\r\n            try {\r\n              textDims = nativeElement.getElementsByTagName('text')[0].getBBox();\r\n            } catch (ex) {\r\n              // Skip drawing if element is not displayed - Firefox would throw an error here\r\n              return;\r\n            }\r\n            node.dimension.width = textDims.width + 20;\r\n          } else {\r\n            node.dimension.width = dims.width;\r\n          }\r\n        }\r\n\r\n        if (this.nodeMaxWidth) {\r\n          node.dimension.width = Math.max(node.dimension.width, this.nodeMaxWidth);\r\n        }\r\n        if (this.nodeMinWidth) {\r\n          node.dimension.width = Math.min(node.dimension.width, this.nodeMinWidth);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Redraws the lines when dragged or viewport updated\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  redrawLines(_animate = true): void {\r\n    this.linkElements.map(linkEl => {\r\n      const edge = this.graph.edges.find(lin => lin.id === linkEl.nativeElement.id);\r\n\r\n      if (edge) {\r\n        const linkSelection = select(linkEl.nativeElement).select('.line');\r\n        linkSelection\r\n          .attr('d', edge.oldLine)\r\n          .transition()\r\n          .duration(_animate ? 500 : 0)\r\n          .attr('d', edge.line);\r\n\r\n        const textPathSelection = select(this.chartElement.nativeElement).select(`#${edge.id}`);\r\n        textPathSelection\r\n          .attr('d', edge.oldTextPath)\r\n          .transition()\r\n          .duration(_animate ? 500 : 0)\r\n          .attr('d', edge.textPath);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates the dagre graph engine\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  createGraph(): void {\r\n    this.graphSubscription.unsubscribe();\r\n    this.graphSubscription = new Subscription();\r\n    const initializeNode = n => {\r\n      if (!n.id) {\r\n        n.id = id();\r\n      }\r\n      n.dimension = {\r\n        width: 30,\r\n        height: 30\r\n      };\r\n      n.position = {\r\n        x: 0,\r\n        y: 0\r\n      };\r\n      n.data = n.data ? n.data : {};\r\n      return n;\r\n    };\r\n    this.graph = {\r\n      nodes: [...this.nodes].map(initializeNode),\r\n      clusters: [...(this.clusters || [])].map(initializeNode),\r\n      edges: [...this.links].map(e => {\r\n        if (!e.id) {\r\n          e.id = id();\r\n        }\r\n        return e;\r\n      })\r\n    };\r\n\r\n    requestAnimationFrame(() => this.draw());\r\n  }\r\n\r\n  /**\r\n   * Calculate the text directions / flipping\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  calcDominantBaseline(link): void {\r\n    const firstPoint = link.points[0];\r\n    const lastPoint = link.points[link.points.length - 1];\r\n    link.oldTextPath = link.textPath;\r\n\r\n    if (lastPoint.x < firstPoint.x) {\r\n      link.dominantBaseline = 'text-before-edge';\r\n\r\n      // reverse text path for when its flipped upside down\r\n      link.textPath = this.generateLine([...link.points].reverse());\r\n    } else {\r\n      link.dominantBaseline = 'text-after-edge';\r\n      link.textPath = link.line;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate the new line path\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  generateLine(points): any {\r\n    const lineFunction = shape\r\n      .line<any>()\r\n      .x(d => d.x)\r\n      .y(d => d.y)\r\n      .curve(this.curve);\r\n    return lineFunction(points);\r\n  }\r\n\r\n  /**\r\n   * Zoom was invoked from event\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onZoom($event: MouseEvent, direction): void {\r\n    const zoomFactor = 1 + (direction === 'in' ? this.zoomSpeed : -this.zoomSpeed);\r\n\r\n    // Check that zooming wouldn't put us out of bounds\r\n    const newZoomLevel = this.zoomLevel * zoomFactor;\r\n    if (newZoomLevel <= this.minZoomLevel || newZoomLevel >= this.maxZoomLevel) {\r\n      return;\r\n    }\r\n\r\n    // Check if zooming is enabled or not\r\n    if (!this.enableZoom) {\r\n      return;\r\n    }\r\n\r\n    if (this.panOnZoom === true && $event) {\r\n      // Absolute mouse X/Y on the screen\r\n      const mouseX = $event.clientX;\r\n      const mouseY = $event.clientY;\r\n\r\n      // Transform the mouse X/Y into a SVG X/Y\r\n      const svg = this.chart.nativeElement.querySelector('svg');\r\n      const svgGroup = svg.querySelector('g.chart');\r\n\r\n      const point = svg.createSVGPoint();\r\n      point.x = mouseX;\r\n      point.y = mouseY;\r\n      const svgPoint = point.matrixTransform(svgGroup.getScreenCTM().inverse());\r\n\r\n      // Panzoom\r\n      const NO_ZOOM_LEVEL = 1;\r\n      this.pan(svgPoint.x, svgPoint.y, NO_ZOOM_LEVEL);\r\n      this.zoom(zoomFactor);\r\n      this.pan(-svgPoint.x, -svgPoint.y, NO_ZOOM_LEVEL);\r\n    } else {\r\n      this.zoom(zoomFactor);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pan by x/y\r\n   *\r\n   */\r\n  pan(x: number, y: number, zoomLevel: number = this.zoomLevel): void {\r\n    this.transformationMatrix = transform(this.transformationMatrix, translate(x / zoomLevel, y / zoomLevel));\r\n\r\n    this.updateTransform();\r\n  }\r\n\r\n  /**\r\n   * Pan to a fixed x/y\r\n   *\r\n   */\r\n  panTo(x: number, y: number): void {\r\n    this.transformationMatrix.e = x === null || x === undefined || isNaN(x) ? this.transformationMatrix.e : Number(x);\r\n    this.transformationMatrix.f = y === null || y === undefined || isNaN(y) ? this.transformationMatrix.f : Number(y);\r\n\r\n    this.updateTransform();\r\n  }\r\n\r\n  /**\r\n   * Zoom by a factor\r\n   *\r\n   */\r\n  zoom(factor: number): void {\r\n    this.transformationMatrix = transform(this.transformationMatrix, scale(factor, factor));\r\n\r\n    this.updateTransform();\r\n  }\r\n\r\n  /**\r\n   * Zoom to a fixed level\r\n   *\r\n   */\r\n  zoomTo(level: number): void {\r\n    this.transformationMatrix.a = isNaN(level) ? this.transformationMatrix.a : Number(level);\r\n    this.transformationMatrix.d = isNaN(level) ? this.transformationMatrix.d : Number(level);\r\n\r\n    this.updateTransform();\r\n  }\r\n\r\n  /**\r\n   * Pan was invoked from event\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onPan(event): void {\r\n    this.pan(event.movementX, event.movementY);\r\n  }\r\n\r\n  /**\r\n   * Drag was invoked from an event\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onDrag(event): void {\r\n    if (!this.draggingEnabled) {\r\n      return;\r\n    }\r\n    const node = this.draggingNode;\r\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDrag) {\r\n      this.layout.onDrag(node, event);\r\n    }\r\n\r\n    node.position.x += event.movementX / this.zoomLevel;\r\n    node.position.y += event.movementY / this.zoomLevel;\r\n\r\n    // move the node\r\n    const x = node.position.x - node.dimension.width / 2;\r\n    const y = node.position.y - node.dimension.height / 2;\r\n    node.transform = `translate(${x}, ${y})`;\r\n\r\n    for (const link of this.graph.edges) {\r\n      if (\r\n        link.target === node.id ||\r\n        link.source === node.id ||\r\n        (link.target as any).id === node.id ||\r\n        (link.source as any).id === node.id\r\n      ) {\r\n        if (this.layout && typeof this.layout !== 'string') {\r\n          const result = this.layout.updateEdge(this.graph, link);\r\n          const result$ = result instanceof Observable ? result : of(result);\r\n          this.graphSubscription.add(\r\n            result$.subscribe(graph => {\r\n              this.graph = graph;\r\n              this.redrawEdge(link);\r\n            })\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    this.redrawLines(false);\r\n  }\r\n\r\n  redrawEdge(edge: Edge) {\r\n    const line = this.generateLine(edge.points);\r\n    this.calcDominantBaseline(edge);\r\n    edge.oldLine = edge.line;\r\n    edge.line = line;\r\n  }\r\n\r\n  /**\r\n   * Update the entire view for the new pan position\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  updateTransform(): void {\r\n    this.transform = toSVG(this.transformationMatrix);\r\n  }\r\n\r\n  /**\r\n   * Node was clicked\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onClick(event, originalEvent): void {\r\n    event.origEvent = originalEvent;\r\n    this.select.emit(event);\r\n  }\r\n\r\n  /**\r\n   * Node was clicked\r\n   *\r\n   */\r\n  onDoubleClick(event, originalEvent): void {\r\n    event.origEvent = originalEvent;\r\n    event.isDoubleClick = true;\r\n    this.select.emit(event);\r\n  }\r\n\r\n  /**\r\n   * Node was focused\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onActivate(event): void {\r\n    if (this.activeEntries.indexOf(event) > -1) {\r\n      return;\r\n    }\r\n    this.activeEntries = [event, ...this.activeEntries];\r\n    this.activate.emit({ value: event, entries: this.activeEntries });\r\n  }\r\n\r\n  /**\r\n   * Node was defocused\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onDeactivate(event): void {\r\n    const idx = this.activeEntries.indexOf(event);\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: event, entries: this.activeEntries });\r\n  }\r\n\r\n  /**\r\n   * Get the domain series for the nodes\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  getSeriesDomain(): any[] {\r\n    return this.nodes\r\n      .map(d => this.groupResultsBy(d))\r\n      .reduce((nodes: string[], node): any[] => (nodes.indexOf(node) !== -1 ? nodes : nodes.concat([node])), [])\r\n      .sort();\r\n  }\r\n\r\n  /**\r\n   * Tracking for the link\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  trackLinkBy(index, link): any {\r\n    return link.id;\r\n  }\r\n\r\n  /**\r\n   * Tracking for the node\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  trackNodeBy(index, node): any {\r\n    return node.id;\r\n  }\r\n\r\n  /**\r\n   * Sets the colors the nodes\r\n   *\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.seriesDomain, this.customColors);\r\n  }\r\n\r\n  /**\r\n   * Gets the legend options\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  getLegendOptions(): any {\r\n    return {\r\n      scaleType: 'ordinal',\r\n      domain: this.seriesDomain,\r\n      colors: this.colors\r\n    };\r\n  }\r\n\r\n  /**\r\n   * On mouse move event, used for panning and dragging.\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  @HostListener('document:mousemove', ['$event'])\r\n  onMouseMove($event: MouseEvent): void {\r\n    if (this.isPanning && this.panningEnabled) {\r\n      this.onPan($event);\r\n    } else if (this.isDragging && this.draggingEnabled) {\r\n      this.onDrag($event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On touch start event to enable panning.\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onTouchStart(event) {\r\n    this._touchLastX = event.changedTouches[0].clientX;\r\n    this._touchLastY = event.changedTouches[0].clientY;\r\n\r\n    this.isPanning = true;\r\n  }\r\n\r\n  /**\r\n   * On touch move event, used for panning.\r\n   *\r\n   */\r\n  @HostListener('document:touchmove', ['$event'])\r\n  onTouchMove($event: TouchEvent): void {\r\n    if (this.isPanning && this.panningEnabled) {\r\n      const clientX = $event.changedTouches[0].clientX;\r\n      const clientY = $event.changedTouches[0].clientY;\r\n      const movementX = clientX - this._touchLastX;\r\n      const movementY = clientY - this._touchLastY;\r\n      this._touchLastX = clientX;\r\n      this._touchLastY = clientY;\r\n\r\n      this.pan(movementX, movementY);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On touch end event to disable panning.\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onTouchEnd(event) {\r\n    this.isPanning = false;\r\n  }\r\n\r\n  /**\r\n   * On mouse up event to disable panning/dragging.\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  @HostListener('document:mouseup')\r\n  onMouseUp(event: MouseEvent): void {\r\n    this.isDragging = false;\r\n    this.isPanning = false;\r\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDragEnd) {\r\n      this.layout.onDragEnd(this.draggingNode, event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On node mouse down to kick off dragging\r\n   *\r\n   * @memberOf GraphComponent\r\n   */\r\n  onNodeMouseDown(event: MouseEvent, node: any): void {\r\n    if (!this.draggingEnabled) {\r\n      return;\r\n    }\r\n    this.isDragging = true;\r\n    this.draggingNode = node;\r\n\r\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDragStart) {\r\n      this.layout.onDragStart(node, event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Center the graph in the viewport\r\n   */\r\n  center(): void {\r\n    this.panTo(\r\n      this.dims.width / 2 - (this.graphDims.width * this.zoomLevel) / 2,\r\n      this.dims.height / 2 - (this.graphDims.height * this.zoomLevel) / 2\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Zooms to fit the entier graph\r\n   */\r\n  zoomToFit(): void {\r\n    const heightZoom = this.dims.height / this.graphDims.height;\r\n    const widthZoom = this.dims.width / this.graphDims.width;\r\n    const zoomLevel = Math.min(heightZoom, widthZoom, 1);\r\n    if (zoomLevel !== this.zoomLevel) {\r\n      this.zoomLevel = zoomLevel;\r\n      this.updateTransform();\r\n    }\r\n  }\r\n}\r\n","import { Directive, Output, HostListener, EventEmitter } from '@angular/core';\r\n\r\n/**\r\n * Mousewheel directive\r\n * https://github.com/SodhanaLibrary/angular2-examples/blob/master/app/mouseWheelDirective/mousewheel.directive.ts\r\n *\r\n * @export\r\n */\r\n@Directive({ selector: '[mouseWheel]' })\r\nexport class MouseWheelDirective {\r\n  @Output()\r\n  mouseWheelUp = new EventEmitter();\r\n  @Output()\r\n  mouseWheelDown = new EventEmitter();\r\n\r\n  @HostListener('mousewheel', ['$event'])\r\n  onMouseWheelChrome(event: any): void {\r\n    this.mouseWheelFunc(event);\r\n  }\r\n\r\n  @HostListener('DOMMouseScroll', ['$event'])\r\n  onMouseWheelFirefox(event: any): void {\r\n    this.mouseWheelFunc(event);\r\n  }\r\n\r\n  @HostListener('onmousewheel', ['$event'])\r\n  onMouseWheelIE(event: any): void {\r\n    this.mouseWheelFunc(event);\r\n  }\r\n\r\n  mouseWheelFunc(event: any): void {\r\n    if (window.event) {\r\n      event = window.event;\r\n    }\r\n\r\n    const delta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\r\n    if (delta > 0) {\r\n      this.mouseWheelUp.emit(event);\r\n    } else if (delta < 0) {\r\n      this.mouseWheelDown.emit(event);\r\n    }\r\n\r\n    // for IE\r\n    event.returnValue = false;\r\n\r\n    // for Chrome and Firefox\r\n    if (event.preventDefault) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { GraphComponent } from './graph.component';\r\nimport { ChartCommonModule } from '@swimlane/ngx-charts';\r\nimport { MouseWheelDirective } from './mouse-wheel.directive';\r\nimport { LayoutService } from './layouts/layout.service';\r\nexport { GraphComponent };\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [GraphComponent, MouseWheelDirective],\r\n  exports: [GraphComponent, MouseWheelDirective],\r\n  providers: [LayoutService]\r\n})\r\nexport class GraphModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { GraphModule } from './graph/graph.module';\r\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\r\n\r\nexport * from './models/index';\r\n\r\n@NgModule({\r\n  imports: [NgxChartsModule],\r\n  exports: [GraphModule]\r\n})\r\nexport class NgxGraphModule {}\r\n"],"names":["dagre.layout","dagre.graphlib","Orientation","layout","shape.curveBundle","line","shape\r\n            .line","ngTransition"],"mappings":"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"}
